{"version":3,"sources":["../src/ArielUtils.ts"],"sourcesContent":["export const numMultipliers = {\r\n  \"\": 1,\r\n  k: 1e3,\r\n  m: 1e6,\r\n  b: 1e9,\r\n  t: 1e12,\r\n  qa: 1e15,\r\n  qi: 1e18,\r\n  sx: 1e21,\r\n  sp: 1e24,\r\n  oc: 1e27,\r\n  no: 1e30,\r\n  dc: 1e33,\r\n  ud: 1e36,\r\n  dd: 1e39,\r\n  td: 1e42,\r\n  qad: 1e45,\r\n  qid: 1e48,\r\n  sxd: 1e51,\r\n  spd: 1e54,\r\n  ocd: 1e57,\r\n  nod: 1e60,\r\n  vg: 1e63,\r\n  uvg: 1e66,\r\n  dvg: 1e69,\r\n  tvg: 1e72,\r\n  qavg: 1e75,\r\n  qivg: 1e78,\r\n  sxvg: 1e81,\r\n  spvg: 1e84,\r\n  ocvg: 1e87,\r\n  novg: 1e90,\r\n  trg: 1e93,\r\n  utrg: 1e96,\r\n  dtrg: 1e99,\r\n  ttrg: 1e102,\r\n  qatrg: 1e105,\r\n  qitrg: 1e108,\r\n  sxtrg: 1e111,\r\n  sptrg: 1e114,\r\n  octrg: 1e117,\r\n  notrg: 1e120,\r\n  qag: 1e123,\r\n  uqag: 1e126,\r\n  dqag: 1e129,\r\n  tqag: 1e132,\r\n  qaqag: 1e135,\r\n  qiqag: 1e138,\r\n  sxqag: 1e141,\r\n  spqag: 1e144,\r\n  ocqag: 1e147,\r\n  noqag: 1e150,\r\n  qig: 1e153,\r\n  uqig: 1e156,\r\n  dqig: 1e159,\r\n  tqig: 1e162,\r\n  qaqig: 1e165,\r\n  qiqig: 1e168,\r\n  sxqig: 1e171,\r\n  spqig: 1e174,\r\n  ocqig: 1e177,\r\n  noqig: 1e180,\r\n  sxg: 1e183,\r\n  usxg: 1e186,\r\n  dsxg: 1e189,\r\n  tsxg: 1e192,\r\n  qasxg: 1e195,\r\n  qisxg: 1e198,\r\n  sxsxg: 1e201,\r\n  spsxg: 1e204,\r\n  ocsxg: 1e207,\r\n  nosxg: 1e210,\r\n  spg: 1e213,\r\n  uspg: 1e216,\r\n  dspg: 1e219,\r\n  tspg: 1e222,\r\n  qaspg: 1e225,\r\n  qispg: 1e228,\r\n  sxspg: 1e231,\r\n  spspg: 1e234,\r\n  ocspg: 1e237,\r\n  nospg: 1e240,\r\n  ocg: 1e243,\r\n  uocg: 1e246,\r\n  docg: 1e249,\r\n  tocg: 1e252,\r\n  qaocg: 1e255,\r\n  qiocg: 1e258,\r\n  sxocg: 1e261,\r\n  spocg: 1e264,\r\n  ococg: 1e267,\r\n  noocg: 1e270,\r\n  nog: 1e273,\r\n  unog: 1e276,\r\n  dnog: 1e279,\r\n  tnog: 1e282,\r\n  qanog: 1e285,\r\n  qinog: 1e288,\r\n  sxnog: 1e291,\r\n  spnog: 1e294,\r\n  ocnog: 1e297,\r\n  nonog: 1e300,\r\n  ctg: 1e303,\r\n  uctg: 1e306,\r\n  ctc: 1e309,\r\n};\r\n\r\nexport function parseBet(arg: string | number, totalBalance: number = NaN) {\r\n  let targetArg = `${arg}`.trim();\r\n\r\n  if (targetArg === \"allin\" || (targetArg === \"all\" && !isNaN(totalBalance))) {\r\n    return Number(totalBalance);\r\n  }\r\n\r\n  if (targetArg.endsWith(\"%\")) {\r\n    const per = parseFloat(targetArg.replaceAll(\"%\", \"\")) / 100;\r\n    return Math.floor(Number(totalBalance) * per);\r\n  }\r\n\r\n  const clean = targetArg.replaceAll(\",\", \"\").replaceAll(\"_\", \"\");\r\n\r\n  const multipliers: Record<string, number> = numMultipliers;\r\n\r\n  const suffixPattern = Object.keys(multipliers)\r\n    .sort((a, b) => b.length - a.length)\r\n    .join(\"|\");\r\n\r\n  const regex = new RegExp(\r\n    `^([\\\\d.]+(?:e[+-]?\\\\d+)?)(?:(${suffixPattern}))?$`,\r\n    \"i\"\r\n  );\r\n\r\n  const match = clean.match(regex);\r\n\r\n  if (match) {\r\n    const numberPart = parseFloat(match[1]);\r\n    const abbreviation = match[2];\r\n\r\n    if (!abbreviation) {\r\n      return Math.floor(numberPart);\r\n    }\r\n\r\n    const multiplier = multipliers[String(abbreviation).toLowerCase()];\r\n    if (multiplier !== undefined) {\r\n      return Math.floor(numberPart * multiplier);\r\n    }\r\n  }\r\n\r\n  return NaN;\r\n}\r\n\r\nexport class ArielIcons {\r\n  static mainArrow = \"⇒\";\r\n  static info = \"ℹ️ ⇒\";\r\n}\r\n\r\nexport function abbreviateNumber(\r\n  value: number | string,\r\n  places: number = 3,\r\n  isFull: boolean = false\r\n) {\r\n  let num = Number(value);\r\n  if (isNaN(num)) return \"Invalid input\";\r\n  if (num < 1000) {\r\n    return num.toFixed(places).replace(/\\.?0+$/, \"\");\r\n  }\r\n\r\n  const suffixes = [\r\n    \"\", // 10^0\r\n    \"K\", // 10^3\r\n    \"M\", // 10^6\r\n    \"B\", // 10^9\r\n    \"T\", // 10^12\r\n    \"Qa\", // Quadrillion, 10^15\r\n    \"Qi\", // Quintillion, 10^18\r\n    \"Sx\", // Sextillion, 10^21\r\n    \"Sp\", // Septillion, 10^24\r\n    \"Oc\", // Octillion, 10^27\r\n    \"No\", // Nonillion, 10^30\r\n    \"Dc\", // Decillion, 10^33\r\n    \"Ud\", // Undecillion, 10^36\r\n    \"Dd\", // Duodecillion, 10^39\r\n    \"Td\", // Tredecillion, 10^42\r\n    \"Qad\", // Quattuordecillion, 10^45\r\n    \"Qid\", // Quindecillion, 10^48\r\n    \"Sxd\", // Sexdecillion, 10^51\r\n    \"Spd\", // Septendecillion, 10^54\r\n    \"Ocd\", // Octodecillion, 10^57\r\n    \"Nod\", // Novemdecillion, 10^60\r\n    \"Vg\", // Vigintillion, 10^63\r\n    \"Uvg\", // Unvigintillion, 10^66\r\n    \"Dvg\", // Duovigintillion, 10^69\r\n    \"Tvg\", // Tresvigintillion, 10^72\r\n    \"Qavg\", // Quattuorvigintillion, 10^75\r\n    \"Qivg\", // Quinquavigintillion, 10^78\r\n    \"Sxvg\", // Sexvigintillion, 10^81\r\n    \"Spvg\", // Septenvigintillion, 10^84\r\n    \"Ocvg\", // Octovigintillion, 10^87\r\n    \"Novg\", // Novemvigintillion, 10^90\r\n    \"Trg\", // Trigintillion, 10^93\r\n    \"Utrg\", // Untrigintillion, 10^96\r\n    \"Dtrg\", // Duotrigintillion, 10^99\r\n    \"Ttrg\", // Trestrigintillion, 10^102\r\n    \"Qatrg\", // Quattuortrigintillion, 10^105\r\n    \"Qitrg\", // Quinquatrigintillion, 10^108\r\n    \"Sxtrg\", // Sextrigintillion, 10^111\r\n    \"Sptrg\", // Septentrigintillion, 10^114\r\n    \"Octrg\", // Octotrigintillion, 10^117\r\n    \"Notrg\", // Novemtrigintillion, 10^120\r\n    \"Qag\", // Quadragintillion, 10^123\r\n    \"Uqag\", // Unquadragintillion, 10^126\r\n    \"Dqag\", // Duoquadragintillion, 10^129\r\n    \"Tqag\", // Tresquadragintillion, 10^132\r\n    \"Qaqag\", // Quattuorquadragintillion, 10^135\r\n    \"Qiqag\", // Quinquaquadragintillion, 10^138\r\n    \"Sxqag\", // Sexquadragintillion, 10^141\r\n    \"Spqag\", // Septenquadragintillion, 10^144\r\n    \"Ocqag\", // Octoquadragintillion, 10^147\r\n    \"Noqag\", // Novemquadragintillion, 10^150\r\n    \"Qig\", // Quinquagintillion, 10^153\r\n    \"Uqig\", // Unquinquagintillion, 10^156\r\n    \"Dqig\", // Duoquinquagintillion, 10^159\r\n    \"Tqig\", // Tresquinquagintillion, 10^162\r\n    \"Qaqig\", // Quattuorquinquagintillion, 10^165\r\n    \"Qiqig\", // Quinquaquinquagintillion, 10^168\r\n    \"Sxqig\", // Sexquinquagintillion, 10^171\r\n    \"Spqig\", // Septenquinquagintillion, 10^174\r\n    \"Ocqig\", // Octoquinquagintillion, 10^177\r\n    \"Noqig\", // Novemquinquagintillion, 10^180\r\n    \"Sxg\", // Sexagintillion, 10^183\r\n    \"Usxg\", // Unsexagintillion, 10^186\r\n    \"Dsxg\", // Duosexagintillion, 10^189\r\n    \"Tsxg\", // Tresexagintillion, 10^192\r\n    \"Qasxg\", // Quattuorsexagintillion, 10^195\r\n    \"Qisxg\", // Quinquasexagintillion, 10^198\r\n    \"Sxsxg\", // Sexsexagintillion, 10^201\r\n    \"Spsxg\", // Septensexagintillion, 10^204\r\n    \"Ocsxg\", // Octosexagintillion, 10^207\r\n    \"Nosxg\", // Novemsexagintillion, 10^210\r\n    \"Spg\", // Septuagintillion, 10^213\r\n    \"Uspg\", // Unseptuagintillion, 10^216\r\n    \"Dspg\", // Duoseptuagintillion, 10^219\r\n    \"Tspg\", // Treseptuagintillion, 10^222\r\n    \"Qaspg\", // Quattuorseptuagintillion, 10^225\r\n    \"Qispg\", // Quinquaseptuagintillion, 10^228\r\n    \"Sxspg\", // Sexseptuagintillion, 10^231\r\n    \"Spspg\", // Septenseptuagintillion, 10^234\r\n    \"Ocspg\", // Octoseptuagintillion, 10^237\r\n    \"Nospg\", // Novemseptuagintillion, 10^240\r\n    \"Ocg\", // Octogintillion, 10^243\r\n    \"Uocg\", // Unoctogintillion, 10^246\r\n    \"Docg\", // Duooctogintillion, 10^249\r\n    \"Tocg\", // Tresoctogintillion, 10^252\r\n    \"Qaocg\", // Quattuoroctogintillion, 10^255\r\n    \"Qiocg\", // Quinquaoctogintillion, 10^258\r\n    \"Sxocg\", // Sexoctogintillion, 10^261\r\n    \"Spocg\", // Septenoctogintillion, 10^264\r\n    \"Ococg\", // Octooctogintillion, 10^267\r\n    \"Noocg\", // Novemoctogintillion, 10^270\r\n    \"Nog\", // Nonagintillion, 10^273\r\n    \"Unog\", // Unnonagintillion, 10^276\r\n    \"Dnog\", // Duononagintillion, 10^279\r\n    \"Tnog\", // Tresnonagintillion, 10^282\r\n    \"Qanog\", // Quattuornonagintillion, 10^285\r\n    \"Qinog\", // Quinquanonagintillion, 10^288\r\n    \"Sxnog\", // Sexnonagintillion, 10^291\r\n    \"Spnog\", // Septennonagintillion, 10^294\r\n    \"Ocnog\", // Octononagintillion, 10^297\r\n    \"Nonog\", // Novemnonagintillion, 10^300\r\n    \"Ctg\", // Centillion, 10^303\r\n    \"Uctg\", // Uncentillion, 10^306\r\n    \"Ctc\", // Centicentillion, 10^309\r\n  ];\r\n\r\n  const fullSuffixes = [\r\n    \"\",\r\n    \"Thousand\",\r\n    \"Million\",\r\n    \"Billion\",\r\n    \"Trillion\",\r\n    \"Quadrillion\",\r\n    \"Quintillion\",\r\n    \"Sextillion\",\r\n    \"Septillion\",\r\n    \"Octillion\",\r\n    \"Nonillion\",\r\n    \"Decillion\",\r\n    \"Undecillion\",\r\n    \"Duodecillion\",\r\n    \"Tredecillion\",\r\n    \"Quattuordecillion\",\r\n    \"Quindecillion\",\r\n    \"Sexdecillion\",\r\n    \"Septendecillion\",\r\n    \"Octodecillion\",\r\n    \"Novemdecillion\",\r\n    \"Vigintillion\",\r\n    \"Unvigintillion\", // 10^66\r\n    \"Duovigintillion\", // 10^69\r\n    \"Tresvigintillion\", // 10^72\r\n    \"Quattuorvigintillion\", // 10^75\r\n    \"Quinquavigintillion\", // 10^78\r\n    \"Sexvigintillion\", // 10^81\r\n    \"Septenvigintillion\", // 10^84\r\n    \"Octovigintillion\", // 10^87\r\n    \"Novemvigintillion\", // 10^90\r\n    \"Trigintillion\", // 10^93\r\n    \"Untrigintillion\", // 10^96\r\n    \"Duotrigintillion\", // 10^99\r\n    \"Trestrigintillion\", // 10^102\r\n    \"Quattuortrigintillion\", // 10^105\r\n    \"Quinquatrigintillion\", // 10^108\r\n    \"Sextrigintillion\", // 10^111\r\n    \"Septentrigintillion\", // 10^114\r\n    \"Octotrigintillion\", // 10^117\r\n    \"Novemtrigintillion\", // 10^120\r\n    \"Quadragintillion\", // 10^123\r\n    \"Unquadragintillion\", // 10^126\r\n    \"Duoquadragintillion\", // 10^129\r\n    \"Tresquadragintillion\", // 10^132\r\n    \"Quattuorquadragintillion\", // 10^135\r\n    \"Quinquaquadragintillion\", // 10^138\r\n    \"Sexquadragintillion\", // 10^141\r\n    \"Septenquadragintillion\", // 10^144\r\n    \"Octoquadragintillion\", // 10^147\r\n    \"Novemquadragintillion\", // 10^150\r\n    \"Quinquagintillion\", // 10^153\r\n    \"Unquinquagintillion\", // 10^156\r\n    \"Duoquinquagintillion\", // 10^159\r\n    \"Tresquinquagintillion\", // 10^162\r\n    \"Quattuorquinquagintillion\", // 10^165\r\n    \"Quinquaquinquagintillion\", // 10^168\r\n    \"Sexquinquagintillion\", // 10^171\r\n    \"Septenquinquagintillion\", // 10^174\r\n    \"Octoquinquagintillion\", // 10^177\r\n    \"Novemquinquagintillion\", // 10^180\r\n    \"Sexagintillion\", // 10^183\r\n    \"Unsexagintillion\", // 10^186\r\n    \"Duosexagintillion\", // 10^189\r\n    \"Tresexagintillion\", // 10^192\r\n    \"Quattuorsexagintillion\", // 10^195\r\n    \"Quinquasexagintillion\", // 10^198\r\n    \"Sexsexagintillion\", // 10^201\r\n    \"Septensexagintillion\", // 10^204\r\n    \"Octosexagintillion\", // 10^207\r\n    \"Novemsexagintillion\", // 10^210\r\n    \"Septuagintillion\", // 10^213\r\n    \"Unseptuagintillion\", // 10^216\r\n    \"Duoseptuagintillion\", // 10^219\r\n    \"Treseptuagintillion\", // 10^222\r\n    \"Quattuorseptuagintillion\", // 10^225\r\n    \"Quinquaseptuagintillion\", // 10^228\r\n    \"Sexseptuagintillion\", // 10^231\r\n    \"Septenseptuagintillion\", // 10^234\r\n    \"Octoseptuagintillion\", // 10^237\r\n    \"Novemseptuagintillion\", // 10^240\r\n    \"Octogintillion\", // 10^243\r\n    \"Unoctogintillion\", // 10^246\r\n    \"Duooctogintillion\", // 10^249\r\n    \"Tresoctogintillion\", // 10^252\r\n    \"Quattuoroctogintillion\", // 10^255\r\n    \"Quinquaoctogintillion\", // 10^258\r\n    \"Sexoctogintillion\", // 10^261\r\n    \"Septenoctogintillion\", // 10^264\r\n    \"Octooctogintillion\", // 10^267\r\n    \"Novemoctogintillion\", // 10^270\r\n    \"Nonagintillion\", // 10^273\r\n    \"Unnonagintillion\", // 10^276\r\n    \"Duononagintillion\", // 10^279\r\n    \"Tresnonagintillion\", // 10^282\r\n    \"Quattuornonagintillion\", // 10^285\r\n    \"Quinquanonagintillion\", // 10^288\r\n    \"Sexnonagintillion\", // 10^291\r\n    \"Septennonagintillion\", // 10^294\r\n    \"Octononagintillion\", // 10^297\r\n    \"Novemnonagintillion\", // 10^300\r\n    \"Centillion\", // 10^303\r\n    \"Uncentillion\", // 10^306\r\n    \"Centicentillion\", // 10^309\r\n  ];\r\n\r\n  const magnitude = Math.floor(Math.log10(num) / 3);\r\n\r\n  if (magnitude === 0) {\r\n    return num % 1 === 0\r\n      ? num.toString()\r\n      : num.toFixed(places).replace(/\\.?0+$/, \"\");\r\n  }\r\n\r\n  const abbreviatedValue = num / Math.pow(1000, magnitude);\r\n  const suffix = isFull ? fullSuffixes[magnitude] : suffixes[magnitude];\r\n\r\n  if (!suffix) {\r\n    return num.toExponential();\r\n  }\r\n\r\n  if (abbreviatedValue % 1 === 0) {\r\n    return `${Math.round(abbreviatedValue)}${isFull ? ` ${suffix}` : suffix}`;\r\n  }\r\n\r\n  const formattedValue =\r\n    places === 0\r\n      ? abbreviatedValue.toFixed(0)\r\n      : abbreviatedValue.toFixed(places).replace(/\\.?0+$/, \"\");\r\n\r\n  return `${formattedValue}${isFull ? ` ${suffix}` : suffix}`;\r\n}\r\n\r\nexport function formatCash(\r\n  number: number,\r\n  emoji?: string,\r\n  bold?: boolean\r\n): string;\r\n\r\nexport function formatCash(number: number, bold?: boolean): string;\r\n\r\nexport function formatCash(\r\n  number: number = 0,\r\n  emoji: string | boolean = \"💵\",\r\n  bold = false\r\n) {\r\n  if (typeof emoji === \"boolean\") {\r\n    bold = emoji;\r\n    emoji = \"💵\";\r\n  }\r\n  return `${bold ? \"**\" : \"\"}${\r\n    number > 999 ? `($${abbreviateNumber(number)}) ` : \"\"\r\n  }$${Number(number).toLocaleString()}${emoji || \"💵\"}${bold ? \"**\" : \"\"}`;\r\n}\r\n\r\nexport function formatValue(\r\n  number: number,\r\n  emoji?: string,\r\n  bold?: boolean\r\n): string;\r\n\r\nexport function formatValue(number: number, bold?: boolean): string;\r\n\r\nexport function formatValue(\r\n  number: number = 0,\r\n  emoji: string | boolean = \"🎲\",\r\n  bold = false\r\n) {\r\n  if (typeof emoji === \"boolean\") {\r\n    bold = emoji;\r\n    emoji = \"🎲\";\r\n  }\r\n  return `${bold ? \"**\" : \"\"}${\r\n    number > 999 ? `(${emoji || \"🎲\"}${abbreviateNumber(number)}) ` : \"\"\r\n  }${emoji || \"🎲\"}${Number(number).toLocaleString()}${bold ? \"**\" : \"\"}`;\r\n}\r\n\r\nexport function formatTimeSentence(ms: number, showMs = false): string {\r\n  const baseUnits = [\r\n    { label: \"year\", ms: 365 * 24 * 60 * 60 * 1000 },\r\n    { label: \"day\", ms: 24 * 60 * 60 * 1000 },\r\n    { label: \"hour\", ms: 60 * 60 * 1000 },\r\n    { label: \"minute\", ms: 60 * 1000 },\r\n    { label: \"second\", ms: 1000 },\r\n  ];\r\n\r\n  const allUnits = showMs\r\n    ? [...baseUnits, { label: \"millisecond\", ms: 1 }]\r\n    : baseUnits;\r\n\r\n  const parts: string[] = [];\r\n\r\n  let remainingMs = ms;\r\n\r\n  for (const { label, ms: unitMs } of allUnits) {\r\n    const value = Math.floor(remainingMs / unitMs);\r\n    if (value > 0) {\r\n      parts.push(`${value} ${label}${value > 1 ? \"s\" : \"\"}`);\r\n      remainingMs %= unitMs;\r\n    }\r\n  }\r\n\r\n  if (parts.length === 0 && !showMs && ms > 0 && ms < 1000) {\r\n    parts.push(`${ms} millisecond${ms !== 1 ? \"s\" : \"\"}`);\r\n  }\r\n\r\n  if (parts.length === 0) return \"\";\r\n\r\n  if (parts.length === 1) return parts[0];\r\n  if (parts.length === 2) return `${parts[0]} and ${parts[1]}`;\r\n  return `${parts.slice(0, -1).join(\", \")}, and ${parts[parts.length - 1]}`;\r\n}\r\n\r\nexport function getMinimumChange(total: number) {\r\n  const exp = Math.floor(Math.log2(Math.abs(total)));\r\n  return Math.pow(2, exp - 52);\r\n}\r\n\r\nexport function isNoChange(change: number, total: number) {\r\n  return change < getMinimumChange(total);\r\n}\r\n"],"mappings":"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","names":[]}