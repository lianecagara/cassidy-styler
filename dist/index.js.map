{"version":3,"sources":["../src/index.ts","../src/font.ts","../src/ArielUtils.ts","../src/Datum.ts"],"sourcesContent":["export { default as FontSystem } from \"./font\";\r\nimport { ApplyFontConfig, fonts, FontTypes } from \"./font\";\r\nexport * from \"./font\";\r\nexport * as Font from \"./font\";\r\nexport * from \"./ArielUtils\";\r\nexport * as ArielUtils from \"./ArielUtils\";\r\nexport { Datum } from \"./Datum\";\r\nexport const line = \"━\";\r\nexport { fonts };\r\n\r\n/**\r\n * Formats a title string by extracting and rearranging emojis and non-emoji characters based on a pattern.\r\n *\r\n * @param {string} str - The input string containing emojis and text.\r\n * @param {string} [pattern] - The format pattern where `{word}` represents non-emoji text and `{emojis}` represents extracted emojis.\r\n * @returns {string} - The formatted title string.\r\n */\r\nexport function forceTitleFormat(str: string, pattern?: string): string {\r\n  pattern ??= `{emojis} {word}`;\r\n  const emojiRegex = /\\p{Emoji}/gu;\r\n\r\n  let emojis = [...str].filter((char) => emojiRegex.test(char)).join(\"\");\r\n  let nonEmojis = [...str]\r\n    .filter((char) => !emojiRegex.test(char))\r\n    .join(\"\")\r\n    .trim()\r\n    .replaceAll(\"|\", \"\");\r\n\r\n  const res = pattern\r\n    .replaceAll(\"{word}\", nonEmojis)\r\n    .replaceAll(\"{emojis}\", emojis);\r\n\r\n  return res;\r\n}\r\n\r\nexport type StyleFormatter = (content: string, extra?: FormatOptions) => string;\r\n\r\n/**\r\n * Creates a reusable formatter that formats title and content text with optional font styles and title patterns.\r\n */\r\nexport function createFormat({\r\n  title,\r\n  contentFont,\r\n  titleFont,\r\n  titlePattern,\r\n  noFormat,\r\n  lineLength,\r\n  fontConfig,\r\n}: FormatOptionsNoContent): StyleFormatter;\r\n\r\nexport function createFormat(options: FormatOptionsNoContent): StyleFormatter {\r\n  return function (content, extra) {\r\n    const normalized = normalizeFormatOverloads({\r\n      ...options,\r\n      ...(extra ?? []),\r\n      content,\r\n    });\r\n    return format({ ...normalized });\r\n  };\r\n}\r\n\r\nexport interface FormatOptionsNoContent {\r\n  title: string;\r\n  titleFont?: FontTypes;\r\n  contentFont?: FontTypes;\r\n  titlePattern?: string;\r\n  noFormat?: boolean;\r\n  lineLength?: number;\r\n  fontConfig?: ApplyFontConfig;\r\n}\r\nexport type FormatOptions = FormatOptionsNoContent & {\r\n  content: string;\r\n};\r\n\r\nexport function normalizeFormatOverloads(\r\n  arg1: string | FormatOptions,\r\n  arg2?: string,\r\n  arg3?: FontTypes | undefined\r\n): FormatOptions {\r\n  let options: FormatOptions;\r\n\r\n  if (typeof arg1 === \"string\" && typeof arg2 === \"string\") {\r\n    options = { title: arg1, content: arg2, contentFont: arg3 };\r\n  } else if (typeof arg1 === \"object\" && arg1 !== null) {\r\n    options = arg1;\r\n  } else {\r\n    throw new Error(\"Invalid arguments\");\r\n  }\r\n\r\n  options.titleFont ??= \"bold\";\r\n  options.contentFont ??= \"fancy\";\r\n  options.titlePattern ??= undefined;\r\n  options.noFormat ??= false;\r\n  options.lineLength ??= 15;\r\n  return options;\r\n}\r\n\r\n/**\r\n * Formats title and content text.\r\n */\r\nexport function format(\r\n  title: string,\r\n  content: string,\r\n  contentFont?: FontTypes\r\n): string;\r\n\r\n/**\r\n * Formats title and content text with optional font styles and title patterns.\r\n */\r\nexport function format({\r\n  title,\r\n  content,\r\n  contentFont,\r\n  titleFont,\r\n  titlePattern,\r\n  noFormat,\r\n  lineLength,\r\n  fontConfig,\r\n}: FormatOptions): string;\r\n\r\n/**\r\n * Formats title and content text with optional font styles and title patterns.\r\n */\r\nexport function format(\r\n  arg1: string | FormatOptions,\r\n  arg2?: string,\r\n  arg3?: FontTypes | undefined\r\n): string {\r\n  const options = normalizeFormatOverloads(arg1, arg2, arg3);\r\n  return `${fonts[options.titleFont ? options.titleFont : \"bold\"](\r\n    !options.noFormat\r\n      ? forceTitleFormat(options.title, options.titlePattern)\r\n      : options.title,\r\n    options.fontConfig\r\n  )}\\n${line.repeat(options.lineLength ?? 15)}\\n${fonts[\r\n    options.contentFont ?? \"fancy\"\r\n  ](autoBold(options.content, options.fontConfig), options.fontConfig)}`;\r\n}\r\n\r\n/**\r\n * A collection of special Unicode characters and symbols.\r\n * Provides commonly used characters like line separators, trademarks, mathematical symbols, and more.\r\n */\r\nexport class UNIRedux {\r\n  /** Special invisible space character */\r\n  static specialSpace = \"ᅠ\";\r\n\r\n  /** Standard line repeated 1 time */\r\n  static singleLine = line;\r\n\r\n  /** Burger menu icon */\r\n  static burger: \"☰\" = \"☰\";\r\n\r\n  /** Standard line repeated 15 times */\r\n  static standardLine = line.repeat(15);\r\n\r\n  /** Section sign */\r\n  static section: \"§\" = \"§\";\r\n\r\n  /** Pilcrow sign */\r\n  static paragraph: \"¶\" = \"¶\";\r\n\r\n  /** Registered trademark sign */\r\n  static registered: \"®\" = \"®\";\r\n\r\n  /** Trademark sign */\r\n  static trademark: \"™\" = \"™\";\r\n\r\n  /** Copyright sign */\r\n  static copyright: \"©\" = \"©\";\r\n\r\n  /** Degree sign */\r\n  static degree: \"°\" = \"°\";\r\n\r\n  /** Micro sign */\r\n  static micro: \"µ\" = \"µ\";\r\n\r\n  /** Bullet point */\r\n  static bullet: \"•\" = \"•\";\r\n\r\n  /** En dash */\r\n  static enDash: \"–\" = \"–\";\r\n\r\n  /** Em dash */\r\n  static emDash: \"—\" = \"—\";\r\n\r\n  /** Prime symbol */\r\n  static prime: \"′\" = \"′\";\r\n\r\n  /** Double prime symbol */\r\n  static doublePrime: \"″\" = \"″\";\r\n\r\n  /** Dagger symbol */\r\n  static daggers: \"†\" = \"†\";\r\n\r\n  /** Double dagger symbol */\r\n  static doubleDagger: \"‡\" = \"‡\";\r\n\r\n  /** Ellipsis */\r\n  static ellipsis: \"…\" = \"…\";\r\n\r\n  /** Infinity symbol */\r\n  static infinity: \"∞\" = \"∞\";\r\n\r\n  /** Generic currency sign */\r\n  static currency: \"¤\" = \"¤\";\r\n\r\n  /** Yen sign */\r\n  static yen: \"¥\" = \"¥\";\r\n\r\n  /** Euro sign */\r\n  static euro: \"€\" = \"€\";\r\n\r\n  /** Pound sign */\r\n  static pound: \"£\" = \"£\";\r\n\r\n  /** Plus-minus sign */\r\n  static plusMinus: \"±\" = \"±\";\r\n\r\n  /** Approximately equal sign */\r\n  static approximately: \"≈\" = \"≈\";\r\n\r\n  /** Not equal to sign */\r\n  static notEqual: \"≠\" = \"≠\";\r\n\r\n  /** Less than or equal to sign */\r\n  static lessThanOrEqual: \"≤\" = \"≤\";\r\n\r\n  /** Greater than or equal to sign */\r\n  static greaterThanOrEqual: \"≥\" = \"≥\";\r\n\r\n  /** Summation sign */\r\n  static summation: \"∑\" = \"∑\";\r\n\r\n  /** Integral sign */\r\n  static integral: \"∫\" = \"∫\";\r\n\r\n  /** Square root sign */\r\n  static squareRoot: \"√\" = \"√\";\r\n\r\n  /** Partial differential sign */\r\n  static partialDifferential: \"∂\" = \"∂\";\r\n\r\n  /** Angle symbol */\r\n  static angle: \"∠\" = \"∠\";\r\n\r\n  /** Degree Fahrenheit sign */\r\n  static degreeFahrenheit: \"℉\" = \"℉\";\r\n\r\n  /** Degree Celsius sign */\r\n  static degreeCelsius: \"℃\" = \"℃\";\r\n\r\n  /** Floral Heart symbol */\r\n  static floralHeart: \"❧\" = \"❧\";\r\n\r\n  /** Star Flower symbol */\r\n  static starFlower: \"✻\" = \"✻\";\r\n\r\n  /** Heavy Star symbol */\r\n  static heavyStar: \"★\" = \"★\";\r\n\r\n  /** Sparkle symbol */\r\n  static sparkle: \"✦\" = \"✦\";\r\n\r\n  /** Asterisk symbol */\r\n  static asterisk: \"✱\" = \"✱\";\r\n\r\n  /** Heavy Check Mark */\r\n  static heavyCheckMark: \"✔\" = \"✔\";\r\n\r\n  /** Heavy Ballot X */\r\n  static heavyBallotX: \"✖\" = \"✖\";\r\n\r\n  /** Heart symbol */\r\n  static heart: \"♥\" = \"♥\";\r\n\r\n  /** Diamond symbol */\r\n  static diamond: \"♦\" = \"♦\";\r\n\r\n  /** Club symbol */\r\n  static club: \"♣\" = \"♣\";\r\n\r\n  /** Spade symbol */\r\n  static spade: \"♠\" = \"♠\";\r\n\r\n  /** Musical Note symbol */\r\n  static musicalNote: \"♪\" = \"♪\";\r\n\r\n  /** Double Musical Note symbol */\r\n  static doubleMusicalNote: \"♫\" = \"♫\";\r\n\r\n  /** Snowflake symbol */\r\n  static snowflake: \"❄\" = \"❄\";\r\n\r\n  /** Sparkle Star symbol */\r\n  static sparkleStar: \"✨\" = \"✨\";\r\n\r\n  /** Anchor symbol */\r\n  static anchor: \"⚓\" = \"⚓\";\r\n\r\n  /** Umbrella symbol */\r\n  static umbrella: \"☔\" = \"☔\";\r\n\r\n  /** Hourglass symbol */\r\n  static hourglass: \"⌛\" = \"⌛\";\r\n\r\n  /** Hourglass Not Done symbol */\r\n  static hourglassNotDone: \"⏳\" = \"⏳\";\r\n\r\n  /** Charm symbol */\r\n  static charm: \"✦\" = \"✦\";\r\n\r\n  /** Disc symbol */\r\n  static disc: \"⦿\" = \"⦿\";\r\n\r\n  /** Arrow symbol */\r\n  static arrow: \"➤\" = \"➤\";\r\n\r\n  /** Arrow (Black and White) symbol */\r\n  static arrowBW: \"➣\" = \"➣\";\r\n\r\n  /** Arrow from Top symbol */\r\n  static arrowFromT: \"➥\" = \"➥\";\r\n\r\n  /** Arrow from Bottom symbol */\r\n  static arrowFromB: \"➦\" = \"➦\";\r\n\r\n  /** Restart symbol */\r\n  static restart: \"⟳\" = \"⟳\";\r\n\r\n  /** Arrow Outline symbol */\r\n  static arrowOutline: \"➩\" = \"➩\";\r\n}\r\n\r\n/**\r\n * Transforms the input text by applying bold and bold-italic formatting.\r\n *\r\n * The function looks for text wrapped in `***` and `**` and replaces them with\r\n * bold-italic and bold formatting respectively.\r\n *\r\n * @param text - The input text to be transformed.\r\n * @returns The transformed text with bold and bold-italic formatting applied.\r\n */\r\nexport function autoBold(text: string, config?: ApplyFontConfig) {\r\n  text = String(text);\r\n  text = text.replace(/\\*\\*\\*(.*?)\\*\\*\\*/g, (_: string, text: string) =>\r\n    fonts.bold_italic(text, config)\r\n  );\r\n  text = text.replace(/\\*\\*(.*?)\\*\\*/g, (_: string, text: string) =>\r\n    fonts.bold(text, config)\r\n  );\r\n  text = text.replace(/`(.*?)`/g, (_: string, text: string) =>\r\n    fonts.typewriter(text, config)\r\n  );\r\n  return text;\r\n}\r\n\r\n/**\r\n * Replaces custom font tags in the given text with corresponding font styles.\r\n *\r\n * The function looks for patterns in the format `[font=fontName]text[:font=fontName]`\r\n * and replaces them with the corresponding font styles if the font names match.\r\n *\r\n * @param text - The input text containing custom font tags.\r\n * @returns The text with font tags replaced by corresponding font styles.\r\n */\r\nexport function fontTag(text: string) {\r\n  text = String(text);\r\n  text = text.replace(\r\n    /\\[font=(.*?)\\]\\s*(.*?)\\s*\\[:font=(.*?)\\]/g,\r\n    (_, font, text, font2) =>\r\n      font === font2 ? fonts[font as FontTypes](text) : text\r\n  );\r\n  return text;\r\n}\r\n\r\ntype StrictMessageForm = {\r\n  body?: string;\r\n  attachment?: ReadableStream | ReadableStream[] | any | any[];\r\n  mentions?: Mention[];\r\n  location?: { latitude: number; longitude: number; current: boolean };\r\n};\r\ntype MessageForm = string | StrictMessageForm;\r\n\r\ntype FCAID = string | number;\r\n\r\ntype Mention = {\r\n  tag: string;\r\n  id: FCAID;\r\n  fromIndex: number;\r\n};\r\n\r\ninterface LiaIOQueue {\r\n  form: MessageForm;\r\n  senderID?: FCAID;\r\n  replyTo?: FCAID | undefined;\r\n  style?: FormatOptions;\r\n  resolve?: (value: any) => any;\r\n  reject?: (reason?: any) => any;\r\n  event?: any;\r\n  api?: any;\r\n}\r\n\r\n/**\r\n * @lianecagara\r\n * Class representing the LiaIOLite/Box for handling message input/output operations.\r\n * This class is responsible for sending, replying, and receiving messages,\r\n * as well as managing message reactions and handling events related to messages.\r\n *\r\n * @class Box\r\n */\r\nexport class Box {\r\n  #api: any = null;\r\n  #event: any = null;\r\n  public style: FormatOptions | undefined;\r\n\r\n  /**\r\n   * Creates an instance of the LiaIO class to manage message interactions.\r\n   *\r\n   * @param {API} api - The API instance for interacting with the messaging service.\r\n   * @param {FCAMessageReplyEvent | any} event - The event that triggered the interaction.\r\n   * @memberof Box\r\n   */\r\n  constructor(api: any, event: any, style?: FormatOptions) {\r\n    this.#api = api;\r\n    this.#event = event;\r\n    this.style = style;\r\n  }\r\n\r\n  static queue: LiaIOQueue[] = [];\r\n\r\n  /**\r\n   * Sends an output message, which can be a reply or a new message.\r\n   *\r\n   * @param params - The parameters for sending the message.\r\n   * @param params.form - The form of the message to be sent.\r\n   * @param params.senderID - The ID of the sender (optional).\r\n   * @param params.replyTo - The ID of the message being replied to (optional).\r\n   * @param style\r\n   * @returns A promise resolving to the sent message event.\r\n   * @memberof Box\r\n   */\r\n  async out(param0: {\r\n    form: MessageForm;\r\n    senderID?: FCAID;\r\n    replyTo?: FCAID;\r\n    style?: FormatOptions;\r\n  }): Promise<any> {\r\n    const {\r\n      form: oform,\r\n      senderID = this.#event.threadID,\r\n      replyTo = undefined,\r\n      style = null,\r\n    } = param0;\r\n    const form = normalizeMessageForm(oform) as StrictMessageForm;\r\n\r\n    let exMents: Mention[] = [];\r\n    if (typeof form.body === \"string\") {\r\n      const ments = form.body.match(/@\\[(.*?)=(.*?)\\]/g);\r\n      if (Array.isArray(ments)) {\r\n        for (const ment of ments) {\r\n          const [tag, uid] = ment.slice(2, -1).split(\"=\");\r\n          form.body = form.body.replace(ment, `@${tag}`);\r\n          exMents.push({\r\n            id: uid,\r\n            tag,\r\n            fromIndex: form.body.indexOf(`@${tag}`),\r\n          });\r\n        }\r\n      }\r\n    }\r\n    let styler: FormatOptions | undefined = this.style;\r\n    if (style) {\r\n      styler = style;\r\n    }\r\n    if (styler && form.body && styler !== undefined && styler.title) {\r\n      const combined: FormatOptions = {\r\n        ...styler,\r\n        content: form.body,\r\n      };\r\n      form.body = format(combined);\r\n    }\r\n\r\n    return new Promise(async (resolve, reject) => {\r\n      form.mentions = [...exMents, ...(form.mentions ?? [])];\r\n      for (const key in form) {\r\n        if (\r\n          form[key as keyof StrictMessageForm] === null ||\r\n          form[key as keyof StrictMessageForm] === undefined\r\n        ) {\r\n          delete form[key as keyof StrictMessageForm];\r\n        }\r\n        if (!form.mentions || form.mentions.length < 1) {\r\n          delete form.mentions;\r\n        }\r\n      }\r\n      console.log(`Form to send:`, form, senderID, replyTo);\r\n      /**\r\n       * @type {LiaIOQueue}\r\n       */\r\n      const queueItem: LiaIOQueue = {\r\n        ...param0,\r\n        senderID,\r\n        replyTo,\r\n        style: styler,\r\n        form,\r\n        resolve,\r\n        reject,\r\n        api: this.#api,\r\n        event: this.#event,\r\n      };\r\n      Box.queue.push(queueItem);\r\n\r\n      if (Box.queue.length === 1) {\r\n        Box._processQueue();\r\n      }\r\n    });\r\n  }\r\n\r\n  static async _processQueue() {\r\n    console.log(`Processing Queue..`);\r\n    while (this.queue.length > 0) {\r\n      const currentTask = this.queue[0];\r\n      console.log(\r\n        `Current Queue task (total ${this.queue.length}):`,\r\n        currentTask.form\r\n      );\r\n\r\n      if (this.queue.length > 1) {\r\n        await new Promise((resolve) => setTimeout(resolve, 500));\r\n      }\r\n\r\n      try {\r\n        console.log(`Sending form...`, currentTask.form);\r\n        const {\r\n          api,\r\n          form: oform,\r\n          reject,\r\n          resolve,\r\n          replyTo,\r\n          senderID,\r\n        } = currentTask;\r\n        const form = normalizeMessageForm(oform);\r\n        api.sendMessage(\r\n          form,\r\n          senderID,\r\n          (err: any, info: any) => {\r\n            if (err && reject) {\r\n              reject(err);\r\n            } else if (resolve) {\r\n              console.log(`Form sent:`, form, senderID, replyTo);\r\n\r\n              resolve(info);\r\n            }\r\n          },\r\n          replyTo ?? undefined\r\n        );\r\n      } catch (error) {\r\n        currentTask.reject?.(error);\r\n      }\r\n      this.queue.shift();\r\n      console.log(`Moving to next queue`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sends a reply to a message, optionally targeting a specific reply.\r\n   *\r\n   * @param form - The form of the reply message to be sent.\r\n   * @param replyTo - The ID of the message being replied to (optional).\r\n   * @returns A promise resolving to the message reply event.\r\n   * @memberof Box\r\n   * @example\r\n   * await liaIO.reply(\"Hello, world!\");\r\n   */\r\n  reply(\r\n    form: MessageForm,\r\n    replyTo: FCAID = this.#event.messageID\r\n  ): Promise<any> {\r\n    return this.out({\r\n      form,\r\n      replyTo,\r\n    });\r\n  }\r\n  /**\r\n   * Sends a message to a destination, optionally specifying the destination ID.\r\n   *\r\n   * @param form - The form of the message to be sent.\r\n   * @param senderID - The ID of the destination to send the message to (optional).\r\n   * @memberof Box\r\n   * @example\r\n   * await liaIO.send(\"Hello, world!\");\r\n   */\r\n  send(\r\n    form: MessageForm,\r\n    senderID: FCAID = this.#event.threadID\r\n  ): Promise<any> {\r\n    return this.out({\r\n      form,\r\n      senderID,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * An easy way to handle errors.\r\n   *\r\n   * @param error - Error to be sent.\r\n   */\r\n  error(error: Error | Record<string, any>): Promise<any> {\r\n    const errString =\r\n      error instanceof Error\r\n        ? String(error.stack)\r\n        : JSON.stringify(error, null, 2);\r\n    console.error(error);\r\n    return this.reply(errString);\r\n  }\r\n\r\n  /**\r\n   * Adds a reaction to a message, optionally targeting a specific message to react to.\r\n   *\r\n   * @param emoji - The reaction to be added (e.g., \"like\", \"love\").\r\n   * @param reactTo - The ID of the message to react to (optional).\r\n   * @returns A promise resolving to the sent reaction event.\r\n   * @memberof Box\r\n   */\r\n  reaction(\r\n    emoji: string,\r\n    reactTo: FCAID = this.#event.messageID\r\n  ): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      this.#api.setMessageReaction(emoji, reactTo, (err: any) => {\r\n        if (err) {\r\n          return reject(err);\r\n        }\r\n        return resolve(true);\r\n      });\r\n    });\r\n  }\r\n\r\n  clone(): Box {\r\n    return new Box(this.#api, this.#event, this.style);\r\n  }\r\n\r\n  styled(style: FormatOptions) {\r\n    return new Box(this.#api, this.#event, style);\r\n  }\r\n}\r\n\r\nfunction normalizeMessageForm(form: MessageForm): StrictMessageForm {\r\n  let r: Record<string, any> = {};\r\n  if (form && r) {\r\n    if (typeof form === \"object\") {\r\n      r = form;\r\n    }\r\n\r\n    if (typeof form === \"string\") {\r\n      r = {\r\n        body: form,\r\n      };\r\n    }\r\n    if (!Array.isArray(r.attachment) && r.attachment) {\r\n      r.attachment = [r.attachment];\r\n    }\r\n    return r;\r\n  } else {\r\n    return {\r\n      body: undefined,\r\n    };\r\n  }\r\n}\r\n\r\nexport const LiaIOLite = Box;\r\n","// Font Mapping Module ni Liane at Nica\r\n//added reverse map\r\nconst fonts = {\r\n  widespace: {\r\n    a: \"ａ\",\r\n    b: \"ｂ\",\r\n    c: \"ｃ\",\r\n    d: \"ｄ\",\r\n    e: \"ｅ\",\r\n    f: \"ｆ\",\r\n    g: \"ｇ\",\r\n    h: \"ｈ\",\r\n    i: \"ｉ\",\r\n\r\n    j: \"ｊ\",\r\n    k: \"ｋ\",\r\n    l: \"ｌ\",\r\n    m: \"ｍ\",\r\n    n: \"ｎ\",\r\n    o: \"ｏ\",\r\n    p: \"ｐ\",\r\n    q: \"ｑ\",\r\n    r: \"ｒ\",\r\n\r\n    s: \"ｓ\",\r\n    t: \"ｔ\",\r\n    u: \"ｕ\",\r\n    v: \"ｖ\",\r\n    w: \"ｗ\",\r\n    x: \"ｘ\",\r\n    y: \"ｙ\",\r\n    z: \"ｚ\",\r\n\r\n    A: \"Ａ\",\r\n    B: \"Ｂ\",\r\n    C: \"Ｃ\",\r\n    D: \"Ｄ\",\r\n    E: \"Ｅ\",\r\n    F: \"Ｆ\",\r\n    G: \"Ｇ\",\r\n    H: \"Ｈ\",\r\n    I: \"Ｉ\",\r\n\r\n    J: \"Ｊ\",\r\n    K: \"Ｋ\",\r\n    L: \"Ｌ\",\r\n    M: \"Ｍ\",\r\n    N: \"Ｎ\",\r\n    O: \"Ｏ\",\r\n    P: \"Ｐ\",\r\n    Q: \"Ｑ\",\r\n    R: \"Ｒ\",\r\n\r\n    S: \"Ｓ\",\r\n    T: \"Ｔ\",\r\n    U: \"Ｕ\",\r\n    V: \"Ｖ\",\r\n    W: \"Ｗ\",\r\n    X: \"Ｘ\",\r\n    Y: \"Ｙ\",\r\n    Z: \"Ｚ\",\r\n\r\n    \" \": \" \",\r\n  },\r\n  serif: {\r\n    a: \"𝐚\",\r\n    b: \"𝐛\",\r\n    c: \"𝐜\",\r\n    d: \"𝐝\",\r\n    e: \"𝐞\",\r\n    f: \"𝐟\",\r\n    g: \"𝐠\",\r\n    h: \"𝐡\",\r\n    i: \"𝐢\",\r\n\r\n    j: \"𝐣\",\r\n    k: \"𝐤\",\r\n    l: \"𝐥\",\r\n    m: \"𝐦\",\r\n    n: \"𝐧\",\r\n    o: \"𝐨\",\r\n    p: \"𝐩\",\r\n    q: \"𝐪\",\r\n    r: \"𝐫\",\r\n\r\n    s: \"𝐬\",\r\n    t: \"𝐭\",\r\n    u: \"𝐮\",\r\n    v: \"𝐯\",\r\n    w: \"𝐰\",\r\n    x: \"𝐱\",\r\n    y: \"𝐲\",\r\n    z: \"𝐳\",\r\n\r\n    A: \"𝐀\",\r\n    B: \"𝐁\",\r\n    C: \"𝐂\",\r\n    D: \"𝐃\",\r\n    E: \"𝐄\",\r\n    F: \"𝐅\",\r\n    G: \"𝐆\",\r\n    H: \"𝐇\",\r\n    I: \"𝐈\",\r\n\r\n    J: \"𝐉\",\r\n    K: \"𝐊\",\r\n    L: \"𝐋\",\r\n    M: \"𝐌\",\r\n    N: \"𝐍\",\r\n    O: \"𝐎\",\r\n    P: \"𝐏\",\r\n    Q: \"𝐐\",\r\n    R: \"𝐑\",\r\n\r\n    S: \"𝐒\",\r\n    T: \"𝐓\",\r\n    U: \"𝐔\",\r\n    V: \"𝐕\",\r\n    W: \"𝐖\",\r\n    X: \"𝐗\",\r\n    Y: \"𝐘\",\r\n    Z: \"𝐙\",\r\n\r\n    \" \": \" \",\r\n  },\r\n\r\n  handwriting: {\r\n    a: \"𝓪\",\r\n    b: \"𝓫\",\r\n    c: \"𝓬\",\r\n    d: \"𝓭\",\r\n    e: \"𝓮\",\r\n    f: \"𝓯\",\r\n    g: \"𝓰\",\r\n    h: \"𝓱\",\r\n    i: \"𝓲\",\r\n\r\n    j: \"𝓳\",\r\n    k: \"𝓴\",\r\n    l: \"𝓵\",\r\n    m: \"𝓶\",\r\n    n: \"𝓷\",\r\n    o: \"𝓸\",\r\n    p: \"𝓹\",\r\n    q: \"𝓺\",\r\n    r: \"𝓻\",\r\n\r\n    s: \"𝓼\",\r\n    t: \"𝓽\",\r\n    u: \"𝓾\",\r\n    v: \"𝓿\",\r\n    w: \"𝔀\",\r\n    x: \"𝔁\",\r\n    y: \"𝔂\",\r\n    z: \"𝔃\",\r\n\r\n    A: \"𝓐\",\r\n    B: \"𝓑\",\r\n    C: \"𝓒\",\r\n    D: \"𝓓\",\r\n    E: \"𝓔\",\r\n    F: \"𝓕\",\r\n    G: \"𝓖\",\r\n    H: \"𝓗\",\r\n    I: \"𝓘\",\r\n\r\n    J: \"𝓙\",\r\n    K: \"𝓚\",\r\n    L: \"𝓛\",\r\n    M: \"𝓜\",\r\n    N: \"𝓝\",\r\n    O: \"𝓞\",\r\n    P: \"𝓟\",\r\n    Q: \"𝓠\",\r\n    R: \"𝓡\",\r\n\r\n    S: \"𝓢\",\r\n    T: \"𝓣\",\r\n    U: \"𝓤\",\r\n    V: \"𝓥\",\r\n    W: \"𝓦\",\r\n    X: \"𝓧\",\r\n    Y: \"𝓨\",\r\n    Z: \"𝓩\",\r\n\r\n    \" \": \" \",\r\n  },\r\n\r\n  scriptbold: {\r\n    a: \"𝒂\",\r\n    b: \"𝒃\",\r\n    c: \"𝒄\",\r\n    d: \"𝒅\",\r\n    e: \"𝒆\",\r\n    f: \"𝒇\",\r\n    g: \"𝒈\",\r\n    h: \"𝒉\",\r\n    i: \"𝒊\",\r\n\r\n    j: \"𝒋\",\r\n    k: \"𝒌\",\r\n    l: \"𝒍\",\r\n    m: \"𝒎\",\r\n    n: \"𝒏\",\r\n    o: \"𝒐\",\r\n    p: \"𝒑\",\r\n    q: \"𝒒\",\r\n    r: \"𝒓\",\r\n\r\n    s: \"𝒔\",\r\n    t: \"𝒕\",\r\n    u: \"𝒖\",\r\n    v: \"𝒗\",\r\n    w: \"𝒘\",\r\n    x: \"𝒙\",\r\n    y: \"𝒚\",\r\n    z: \"𝒛\",\r\n\r\n    A: \"𝑨\",\r\n    B: \"𝑩\",\r\n    C: \"𝑪\",\r\n    D: \"𝑫\",\r\n    E: \"𝑬\",\r\n    F: \"𝑭\",\r\n    G: \"𝑮\",\r\n    H: \"𝑯\",\r\n    I: \"𝑰\",\r\n\r\n    J: \"𝑱\",\r\n    K: \"𝑲\",\r\n    L: \"𝑳\",\r\n    M: \"𝑴\",\r\n    N: \"𝑵\",\r\n    O: \"𝑶\",\r\n    P: \"𝑷\",\r\n    Q: \"𝑸\",\r\n    R: \"𝑹\",\r\n\r\n    S: \"𝑺\",\r\n    T: \"𝑻\",\r\n    U: \"𝑼\",\r\n    V: \"𝑽\",\r\n    W: \"𝑾\",\r\n    X: \"𝑿\",\r\n    Y: \"𝒀\",\r\n    Z: \"𝒁\",\r\n\r\n    \" \": \" \",\r\n  },\r\n\r\n  script: {\r\n    a: \"𝑎\",\r\n    b: \"𝑏\",\r\n    c: \"𝑐\",\r\n    d: \"𝑑\",\r\n    e: \"𝑒\",\r\n    f: \"𝑓\",\r\n    g: \"𝑔\",\r\n    h: \"ℎ\",\r\n    i: \"𝑖\",\r\n\r\n    j: \"𝑗\",\r\n    k: \"𝑘\",\r\n    l: \"𝑙\",\r\n    m: \"𝑚\",\r\n    n: \"𝑛\",\r\n    o: \"𝑜\",\r\n    p: \"𝑝\",\r\n    q: \"𝑞\",\r\n    r: \"𝑟\",\r\n\r\n    s: \"𝑠\",\r\n    t: \"𝑡\",\r\n    u: \"𝑢\",\r\n    v: \"𝑣\",\r\n    w: \"𝑤\",\r\n    x: \"𝑥\",\r\n    y: \"𝑦\",\r\n    z: \"𝑧\",\r\n\r\n    A: \"𝐴\",\r\n    B: \"𝐵\",\r\n    C: \"𝐶\",\r\n    D: \"𝐷\",\r\n    E: \"𝐸\",\r\n    F: \"𝐹\",\r\n    G: \"𝐺\",\r\n    H: \"𝐻\",\r\n    I: \"𝐼\",\r\n\r\n    J: \"𝐽\",\r\n    K: \"𝐾\",\r\n    L: \"𝐿\",\r\n    M: \"𝑀\",\r\n    N: \"𝑁\",\r\n    O: \"𝑂\",\r\n    P: \"𝑃\",\r\n    Q: \"𝑄\",\r\n    R: \"𝑅\",\r\n\r\n    S: \"𝑆\",\r\n    T: \"𝑇\",\r\n    U: \"𝑈\",\r\n    V: \"𝑉\",\r\n    W: \"𝑊\",\r\n    X: \"𝑋\",\r\n    Y: \"𝑌\",\r\n    Z: \"𝑍\",\r\n\r\n    \" \": \" \",\r\n  },\r\n\r\n  typewriter: {\r\n    a: \"𝚊\",\r\n    b: \"𝚋\",\r\n    c: \"𝚌\",\r\n    d: \"𝚍\",\r\n    e: \"𝚎\",\r\n    f: \"𝚏\",\r\n    g: \"𝚐\",\r\n    h: \"𝚑\",\r\n    i: \"𝚒\",\r\n\r\n    j: \"𝚓\",\r\n    k: \"𝚔\",\r\n    l: \"𝚕\",\r\n    m: \"𝚖\",\r\n    n: \"𝚗\",\r\n    o: \"𝚘\",\r\n    p: \"𝚙\",\r\n    q: \"𝚚\",\r\n    r: \"𝚛\",\r\n\r\n    s: \"𝚜\",\r\n    t: \"𝚝\",\r\n    u: \"𝚞\",\r\n    v: \"𝚟\",\r\n    w: \"𝚠\",\r\n    x: \"𝚡\",\r\n    y: \"𝚢\",\r\n    z: \"𝚣\",\r\n\r\n    A: \"𝙰\",\r\n    B: \"𝙱\",\r\n    C: \"𝙲\",\r\n    D: \"𝙳\",\r\n    E: \"𝙴\",\r\n    F: \"𝙵\",\r\n    G: \"𝙶\",\r\n    H: \"𝙷\",\r\n    I: \"𝙸\",\r\n\r\n    J: \"𝙹\",\r\n    K: \"𝙺\",\r\n    L: \"𝙻\",\r\n    M: \"𝙼\",\r\n    N: \"𝙽\",\r\n    O: \"𝙾\",\r\n    P: \"𝙿\",\r\n    Q: \"𝚀\",\r\n    R: \"𝚁\",\r\n\r\n    S: \"𝚂\",\r\n    T: \"𝚃\",\r\n    U: \"𝚄\",\r\n    V: \"𝚅\",\r\n    W: \"𝚆\",\r\n    X: \"𝚇\",\r\n    Y: \"𝚈\",\r\n    Z: \"𝚉\",\r\n\r\n    \"1\": \"𝟷\",\r\n    \"2\": \"𝟸\",\r\n    \"3\": \"𝟹\",\r\n    \"4\": \"𝟺\",\r\n    \"5\": \"𝟻\",\r\n    \"6\": \"𝟼\",\r\n    \"7\": \"𝟽\",\r\n    \"8\": \"𝟾\",\r\n    \"9\": \"𝟿\",\r\n    \"0\": \"𝟶\",\r\n\r\n    \" \": \" \",\r\n  },\r\n  bold: {\r\n    0: \"𝟬\",\r\n    1: \"𝟭\",\r\n    2: \"𝟮\",\r\n    3: \"𝟯\",\r\n    4: \"𝟰\",\r\n    5: \"𝟱\",\r\n    6: \"𝟲\",\r\n    7: \"𝟳\",\r\n    8: \"𝟴\",\r\n    9: \"𝟵\",\r\n    a: \"𝗮\",\r\n    b: \"𝗯\",\r\n    c: \"𝗰\",\r\n    d: \"𝗱\",\r\n    e: \"𝗲\",\r\n    f: \"𝗳\",\r\n    g: \"𝗴\",\r\n    h: \"𝗵\",\r\n    i: \"𝗶\",\r\n    j: \"𝗷\",\r\n    k: \"𝗸\",\r\n    l: \"𝗹\",\r\n    m: \"𝗺\",\r\n    n: \"𝗻\",\r\n    o: \"𝗼\",\r\n    p: \"𝗽\",\r\n    q: \"𝗾\",\r\n    r: \"𝗿\",\r\n    s: \"𝘀\",\r\n    t: \"𝘁\",\r\n    u: \"𝘂\",\r\n    v: \"𝘃\",\r\n    w: \"𝘄\",\r\n    x: \"𝘅\",\r\n    y: \"𝘆\",\r\n    z: \"𝘇\",\r\n    A: \"𝗔\",\r\n    B: \"𝗕\",\r\n    C: \"𝗖\",\r\n    D: \"𝗗\",\r\n    E: \"𝗘\",\r\n    F: \"𝗙\",\r\n    G: \"𝗚\",\r\n    H: \"𝗛\",\r\n    I: \"𝗜\",\r\n    J: \"𝗝\",\r\n    K: \"𝗞\",\r\n    L: \"𝗟\",\r\n    M: \"𝗠\",\r\n    N: \"𝗡\",\r\n    O: \"𝗢\",\r\n    P: \"𝗣\",\r\n    Q: \"𝗤\",\r\n    R: \"𝗥\",\r\n    S: \"𝗦\",\r\n    T: \"𝗧\",\r\n    U: \"𝗨\",\r\n    V: \"𝗩\",\r\n    W: \"𝗪\",\r\n    X: \"𝗫\",\r\n    Y: \"𝗬\",\r\n    Z: \"𝗭\",\r\n  },\r\n  fancy: {\r\n    0: \"𝟢\",\r\n    1: \"𝟣\",\r\n    2: \"𝟤\",\r\n    3: \"𝟥\",\r\n    4: \"𝟦\",\r\n    5: \"𝟧\",\r\n    6: \"𝟨\",\r\n    7: \"𝟩\",\r\n    8: \"𝟪\",\r\n    9: \"𝟫\",\r\n    a: \"𝖺\",\r\n    b: \"𝖻\",\r\n    c: \"𝖼\",\r\n    d: \"𝖽\",\r\n    e: \"𝖾\",\r\n    f: \"𝖿\",\r\n    g: \"𝗀\",\r\n    h: \"𝗁\",\r\n    i: \"𝗂\",\r\n    j: \"𝗃\",\r\n    k: \"𝗄\",\r\n    l: \"𝗅\",\r\n    m: \"𝗆\",\r\n    n: \"𝗇\",\r\n    o: \"𝗈\",\r\n    p: \"𝗉\",\r\n    q: \"𝗊\",\r\n    r: \"𝗋\",\r\n    s: \"𝗌\",\r\n    t: \"𝗍\",\r\n    u: \"𝗎\",\r\n    v: \"𝗏\",\r\n    w: \"𝗐\",\r\n    x: \"𝗑\",\r\n    y: \"𝗒\",\r\n    z: \"𝗓\",\r\n    A: \"𝖠\",\r\n    B: \"𝖡\",\r\n    C: \"𝖢\",\r\n    D: \"𝖣\",\r\n    E: \"𝖤\",\r\n    F: \"𝖥\",\r\n    G: \"𝖦\",\r\n    H: \"𝖧\",\r\n    I: \"𝖨\",\r\n    J: \"𝖩\",\r\n    K: \"𝖪\",\r\n    L: \"𝖫\",\r\n    M: \"𝖬\",\r\n    N: \"𝖭\",\r\n    O: \"𝖮\",\r\n    P: \"𝖯\",\r\n    Q: \"𝖰\",\r\n    R: \"𝖱\",\r\n    S: \"𝖲\",\r\n    T: \"𝖳\",\r\n    U: \"𝖴\",\r\n    V: \"𝖵\",\r\n    W: \"𝖶\",\r\n    X: \"𝖷\",\r\n    Y: \"𝖸\",\r\n    Z: \"𝖹\",\r\n  },\r\n  get redux() {\r\n    return {\r\n      ...this.fancy,\r\n      a: \"ᥲ\",\r\n      b: \"ᑲ\",\r\n      c: \"ᥴ\",\r\n      e: \"ᥱ\",\r\n      f: \"𝖿\",\r\n      h: \"һ\",\r\n      j: \"ȷ\",\r\n      l: \"ᥣ\",\r\n      n: \"ᥒ\",\r\n      o: \"᥆\",\r\n      p: \"⍴\",\r\n      q: \"𝗊\",\r\n      t: \"𝗍\",\r\n      u: \"ᥙ\",\r\n      v: \"᥎\",\r\n      w: \"ᥕ\",\r\n      x: \"᥊\",\r\n    };\r\n  },\r\n  moody: {\r\n    0: \"𝟶\",\r\n    1: \"𝟷\",\r\n    2: \"𝟸\",\r\n    3: \"𝟹\",\r\n    4: \"𝟺\",\r\n    5: \"𝟻\",\r\n    6: \"𝟼\",\r\n    7: \"𝟽\",\r\n    8: \"𝟾\",\r\n    9: \"𝟿\",\r\n    a: \"𝚊\",\r\n    b: \"𝚋\",\r\n    c: \"𝚌\",\r\n    d: \"𝚍\",\r\n    e: \"𝚎\",\r\n    f: \"𝚏\",\r\n    g: \"𝚐\",\r\n    h: \"𝚑\",\r\n    i: \"𝚒\",\r\n    j: \"𝚓\",\r\n    k: \"𝚔\",\r\n    l: \"𝚕\",\r\n    m: \"𝚖\",\r\n    n: \"𝚗\",\r\n    o: \"𝚘\",\r\n    p: \"𝚙\",\r\n    q: \"𝚚\",\r\n    r: \"𝚛\",\r\n    s: \"𝚜\",\r\n    t: \"𝚝\",\r\n    u: \"𝚞\",\r\n    v: \"𝚟\",\r\n    w: \"𝚠\",\r\n    x: \"𝚡\",\r\n    y: \"𝚢\",\r\n    z: \"𝚣\",\r\n    A: \"𝐀\",\r\n    B: \"𝐁\",\r\n    C: \"𝐂\",\r\n    D: \"𝐃\",\r\n    E: \"𝐄\",\r\n    F: \"𝐅\",\r\n    G: \"𝐆\",\r\n    H: \"𝐇\",\r\n    I: \"𝐈\",\r\n    J: \"𝐉\",\r\n    K: \"𝐊\",\r\n    L: \"𝐋\",\r\n    M: \"𝐌\",\r\n    N: \"𝐍\",\r\n    O: \"𝐎\",\r\n    P: \"𝐏\",\r\n    Q: \"𝐐\",\r\n    R: \"𝐑\",\r\n    S: \"𝐒\",\r\n    T: \"𝐓\",\r\n    U: \"𝐔\",\r\n    V: \"𝐕\",\r\n    W: \"𝐖\",\r\n    X: \"𝐗\",\r\n    Y: \"𝐘\",\r\n    Z: \"𝐙\",\r\n  },\r\n  none: {},\r\n  bold_italic: {\r\n    A: \"𝘼\",\r\n    B: \"𝘽\",\r\n    C: \"𝘾\",\r\n    D: \"𝘿\",\r\n    E: \"𝙀\",\r\n    F: \"𝙁\",\r\n    G: \"𝙂\",\r\n    H: \"𝙃\",\r\n    I: \"𝙄\",\r\n    J: \"𝙅\",\r\n    K: \"𝙆\",\r\n    L: \"𝙇\",\r\n    M: \"𝙈\",\r\n    N: \"𝙉\",\r\n    O: \"𝙊\",\r\n    P: \"𝙋\",\r\n    Q: \"𝙌\",\r\n    R: \"𝙍\",\r\n    S: \"𝙎\",\r\n    T: \"𝙏\",\r\n    U: \"𝙐\",\r\n    V: \"𝙑\",\r\n    W: \"𝙒\",\r\n    X: \"𝙓\",\r\n    Y: \"𝙔\",\r\n    Z: \"𝙕\",\r\n    a: \"𝙖\",\r\n    b: \"𝙗\",\r\n    c: \"𝙘\",\r\n    d: \"𝙙\",\r\n    e: \"𝙚\",\r\n    f: \"𝙛\",\r\n    g: \"𝙜\",\r\n    h: \"𝙝\",\r\n    i: \"𝙞\",\r\n    j: \"𝙟\",\r\n    k: \"𝙠\",\r\n    l: \"𝙡\",\r\n    m: \"𝙢\",\r\n    n: \"𝙣\",\r\n    o: \"𝙤\",\r\n    p: \"𝙥\",\r\n    q: \"𝙦\",\r\n    r: \"𝙧\",\r\n    s: \"𝙨\",\r\n    t: \"𝙩\",\r\n    u: \"𝙪\",\r\n    v: \"𝙫\",\r\n    w: \"𝙬\",\r\n    x: \"𝙭\",\r\n    y: \"𝙮\",\r\n    z: \"𝙯\",\r\n    0: \"𝟬\",\r\n    1: \"𝟭\",\r\n    2: \"𝟮\",\r\n    3: \"𝟯\",\r\n    4: \"𝟰\",\r\n    5: \"𝟱\",\r\n    6: \"𝟲\",\r\n    7: \"𝟳\",\r\n    8: \"𝟴\",\r\n    9: \"𝟵\",\r\n  },\r\n  fancy_italic: {\r\n    A: \"𝘈\",\r\n    B: \"𝘉\",\r\n    C: \"𝘊\",\r\n    D: \"𝘋\",\r\n    E: \"𝘌\",\r\n    F: \"𝘍\",\r\n    G: \"𝘎\",\r\n    H: \"𝘏\",\r\n    I: \"𝘐\",\r\n    J: \"𝘑\",\r\n    K: \"𝘒\",\r\n    L: \"𝘓\",\r\n    M: \"𝘔\",\r\n    N: \"𝘕\",\r\n    O: \"𝘖\",\r\n    P: \"𝘗\",\r\n    Q: \"𝘘\",\r\n    R: \"𝘙\",\r\n    S: \"𝘚\",\r\n    T: \"𝘛\",\r\n    U: \"𝘜\",\r\n    V: \"𝘝\",\r\n    W: \"𝘞\",\r\n    X: \"𝘟\",\r\n    Y: \"𝘠\",\r\n    Z: \"𝘡\",\r\n    a: \"𝘢\",\r\n    b: \"𝘣\",\r\n    c: \"𝘤\",\r\n    d: \"𝘥\",\r\n    e: \"𝘦\",\r\n    f: \"𝘧\",\r\n    g: \"𝘨\",\r\n    h: \"𝘩\",\r\n    i: \"𝘪\",\r\n    j: \"𝘫\",\r\n    k: \"𝘬\",\r\n    l: \"𝘭\",\r\n    m: \"𝘮\",\r\n    n: \"𝘯\",\r\n    o: \"𝘰\",\r\n    p: \"𝘱\",\r\n    q: \"𝘲\",\r\n    r: \"𝘳\",\r\n    s: \"𝘴\",\r\n    t: \"𝘵\",\r\n    u: \"𝘶\",\r\n    v: \"𝘷\",\r\n    w: \"𝘸\",\r\n    x: \"𝘹\",\r\n    y: \"𝘺\",\r\n    z: \"𝘻\",\r\n    0: \"𝟢\",\r\n    1: \"𝟣\",\r\n    2: \"𝟤\",\r\n    3: \"𝟥\",\r\n    4: \"𝟦\",\r\n    5: \"𝟧\",\r\n    6: \"𝟨\",\r\n    7: \"𝟩\",\r\n    8: \"𝟪\",\r\n    9: \"𝟫\",\r\n  },\r\n  serif2: {\r\n    A: \"𝐀\",\r\n    B: \"𝐁\",\r\n    C: \"𝐂\",\r\n    D: \"𝐃\",\r\n    E: \"𝐄\",\r\n    F: \"𝐅\",\r\n    G: \"𝐆\",\r\n    H: \"𝐇\",\r\n    I: \"𝐈\",\r\n    J: \"𝐉\",\r\n    K: \"𝐊\",\r\n    L: \"𝐋\",\r\n    M: \"𝐌\",\r\n    N: \"𝐍\",\r\n    O: \"𝐎\",\r\n    P: \"𝐏\",\r\n    Q: \"𝐐\",\r\n    R: \"𝐑\",\r\n    S: \"𝐒\",\r\n    T: \"𝐓\",\r\n    U: \"𝐔\",\r\n    V: \"𝐕\",\r\n    W: \"𝐖\",\r\n    X: \"𝐗\",\r\n    Y: \"𝐘\",\r\n    Z: \"𝐙\",\r\n    a: \"𝐚\",\r\n    b: \"𝐛\",\r\n    c: \"𝐜\",\r\n    d: \"𝐝\",\r\n    e: \"𝐞\",\r\n    f: \"𝐟\",\r\n    g: \"𝐠\",\r\n    h: \"𝐡\",\r\n    i: \"𝐢\",\r\n    j: \"𝐣\",\r\n    k: \"𝐤\",\r\n    l: \"𝐥\",\r\n    m: \"𝐦\",\r\n    n: \"𝐧\",\r\n    o: \"𝐨\",\r\n    p: \"𝐩\",\r\n    q: \"𝐪\",\r\n    r: \"𝐫\",\r\n    s: \"𝐬\",\r\n    t: \"𝐭\",\r\n    u: \"𝐮\",\r\n    v: \"𝐯\",\r\n    w: \"𝐰\",\r\n    x: \"𝐱\",\r\n    y: \"𝐲\",\r\n    z: \"𝐳\",\r\n    1: \"𝟏\",\r\n    2: \"𝟐\",\r\n    3: \"𝟑\",\r\n    4: \"𝟒\",\r\n    5: \"𝟓\",\r\n    6: \"𝟔\",\r\n    7: \"𝟕\",\r\n    8: \"𝟖\",\r\n    9: \"𝟗\",\r\n    0: \"𝟎\",\r\n  },\r\n  double_struck: {\r\n    A: \"𝔸\",\r\n    B: \"𝔹\",\r\n    C: \"ℂ\",\r\n    D: \"𝔻\",\r\n    E: \"𝔼\",\r\n    F: \"𝔽\",\r\n    G: \"𝔾\",\r\n    H: \"ℍ\",\r\n    I: \"𝕀\",\r\n    J: \"𝕁\",\r\n    K: \"𝕂\",\r\n    L: \"𝕃\",\r\n    M: \"𝕄\",\r\n    N: \"ℕ\",\r\n    O: \"𝕆\",\r\n    P: \"ℙ\",\r\n    Q: \"ℚ\",\r\n    R: \"ℝ\",\r\n    S: \"𝕊\",\r\n    T: \"𝕋\",\r\n    U: \"𝕌\",\r\n    V: \"𝕍\",\r\n    W: \"𝕎\",\r\n    X: \"𝕏\",\r\n    Y: \"𝕐\",\r\n    Z: \"ℤ\",\r\n    a: \"𝕒\",\r\n    b: \"𝕓\",\r\n    c: \"𝕔\",\r\n    d: \"𝕕\",\r\n    e: \"𝕖\",\r\n    f: \"𝕗\",\r\n    g: \"𝕘\",\r\n    h: \"𝕙\",\r\n    i: \"𝕚\",\r\n    j: \"𝕛\",\r\n    k: \"𝕜\",\r\n    l: \"𝕝\",\r\n    m: \"𝕞\",\r\n    n: \"𝕟\",\r\n    o: \"𝕠\",\r\n    p: \"𝕡\",\r\n    q: \"𝕢\",\r\n    r: \"𝕣\",\r\n    s: \"𝕤\",\r\n    t: \"𝕥\",\r\n    u: \"𝕦\",\r\n    v: \"𝕧\",\r\n    w: \"𝕨\",\r\n    x: \"𝕩\",\r\n    y: \"𝕪\",\r\n    z: \"𝕫\",\r\n    1: \"𝟙\",\r\n    2: \"𝟚\",\r\n    3: \"𝟛\",\r\n    4: \"𝟜\",\r\n    5: \"𝟝\",\r\n    6: \"𝟞\",\r\n    7: \"𝟟\",\r\n    8: \"𝟠\",\r\n    9: \"𝟡\",\r\n    0: \"𝟘\",\r\n  },\r\n} as const;\r\n\r\nexport type FontsProxy = {\r\n  [K in FontTypes]: (text: string, config?: ApplyFontConfig) => string;\r\n};\r\n\r\nexport const FontTypes = Object.keys(fonts) as (keyof typeof fonts)[];\r\n\r\nexport type FontTypes = keyof typeof fonts;\r\n\r\nconst FontSystem = {\r\n  /**\r\n   * Applies a specified font style to a given text.\r\n   *\r\n   * @param {string} text - The input text to style.\r\n   * @param {FontTypes} [font=\"none\"] - The font type to apply.\r\n   * @param {ApplyFontConfig} [config={}] - Configuration for ignoring words/links.\r\n   * @returns {string} - The formatted text.\r\n   */\r\n  applyFonts(\r\n    text: string,\r\n    font: FontTypes = \"none\",\r\n    config: ApplyFontConfig = {}\r\n  ): string {\r\n    config ??= {};\r\n    config.ignoreLinks ??= true;\r\n    if (!FontTypes.includes(font)) {\r\n      throw new TypeError(\r\n        `${font} is not a valid font type. All valid font types are ${FontTypes.join(\r\n          \", \"\r\n        )}`\r\n      );\r\n    }\r\n    const func = fonts[font];\r\n    const linkRegex = /(https?:\\/\\/[^\\s]+)/g;\r\n    let parts: { value: string; skip: boolean }[] = [];\r\n\r\n    let lastIndex = 0;\r\n    text.replace(linkRegex, (match, _, offset) => {\r\n      if (lastIndex < offset) {\r\n        parts.push({ value: text.slice(lastIndex, offset), skip: false });\r\n      }\r\n      parts.push({ value: match, skip: config.ignoreLinks ?? false });\r\n      lastIndex = offset + match.length;\r\n      return match;\r\n    });\r\n    if (lastIndex < text.length) {\r\n      parts.push({ value: text.slice(lastIndex), skip: false });\r\n    }\r\n    return parts\r\n      .map(({ value, skip }) => {\r\n        if (skip) return value;\r\n\r\n        return value\r\n          .split(/\\b/)\r\n          .map((segment) => {\r\n            if (config.ignoreWords?.includes(segment)) {\r\n              return segment;\r\n            }\r\n\r\n            return segment\r\n              .split(\"\")\r\n              .map((char) =>\r\n                char in func ? func[char as keyof typeof func] : char\r\n              )\r\n              .join(\"\");\r\n          })\r\n          .join(\"\");\r\n      })\r\n      .join(\"\");\r\n  },\r\n  /**\r\n   * All valid font names.\r\n   */\r\n  fontNames: FontTypes,\r\n\r\n  /**\r\n   * Retrieves a formatted list of all available font styles.\r\n   */\r\n  allFonts(): string {\r\n    let fontList = ``;\r\n    Object.keys(fonts).forEach((font) => {\r\n      const someText = font\r\n        .replace(/_/g, \" \")\r\n        .replace(/\\b\\w/g, (match) => match.toUpperCase());\r\n\r\n      fontList += this.fonts[font as FontTypes](someText) + \"\\n\";\r\n    });\r\n    return fontList;\r\n  },\r\n  /**\r\n   * A direct reference to the font mapping object.\r\n   */\r\n  fontMap: fonts,\r\n  /**\r\n   * Provides a proxy to dynamically apply fonts without explicitly calling `applyFonts`.\r\n   */\r\n  get fonts() {\r\n    return new Proxy(\r\n      {},\r\n      {\r\n        get(_, prop: string | symbol): FontsProxy[FontTypes] {\r\n          if (\r\n            FontTypes.includes(prop as FontTypes) &&\r\n            typeof prop === \"string\"\r\n          ) {\r\n            return function (text: string, config) {\r\n              return FontSystem.applyFonts(\r\n                String(text),\r\n                prop as FontTypes,\r\n                config\r\n              );\r\n            };\r\n          } else {\r\n            throw new TypeError(\r\n              `${String(\r\n                prop\r\n              )} is not a valid font type. All valid font types are ${FontTypes.join(\r\n                \", \"\r\n              )}`\r\n            );\r\n          }\r\n        },\r\n      }\r\n    ) as FontsProxy;\r\n  },\r\n};\r\n\r\nexport const applyFonts = FontSystem.applyFonts;\r\nexport const allFonts = FontSystem.allFonts;\r\nexport const fontMap = FontSystem.fontMap;\r\n\r\nconst fonts2 = FontSystem.fonts;\r\nexport { fonts2 as fonts };\r\n\r\nexport default FontSystem;\r\n\r\nexport interface ApplyFontConfig {\r\n  ignoreWords?: string[];\r\n  ignoreLinks?: boolean;\r\n}\r\n","export const numMultipliers = {\r\n  \"\": 1,\r\n  k: 1e3,\r\n  m: 1e6,\r\n  b: 1e9,\r\n  t: 1e12,\r\n  qa: 1e15,\r\n  qi: 1e18,\r\n  sx: 1e21,\r\n  sp: 1e24,\r\n  oc: 1e27,\r\n  no: 1e30,\r\n  dc: 1e33,\r\n  ud: 1e36,\r\n  dd: 1e39,\r\n  td: 1e42,\r\n  qad: 1e45,\r\n  qid: 1e48,\r\n  sxd: 1e51,\r\n  spd: 1e54,\r\n  ocd: 1e57,\r\n  nod: 1e60,\r\n  vg: 1e63,\r\n  uvg: 1e66,\r\n  dvg: 1e69,\r\n  tvg: 1e72,\r\n  qavg: 1e75,\r\n  qivg: 1e78,\r\n  sxvg: 1e81,\r\n  spvg: 1e84,\r\n  ocvg: 1e87,\r\n  novg: 1e90,\r\n  trg: 1e93,\r\n  utrg: 1e96,\r\n  dtrg: 1e99,\r\n  ttrg: 1e102,\r\n  qatrg: 1e105,\r\n  qitrg: 1e108,\r\n  sxtrg: 1e111,\r\n  sptrg: 1e114,\r\n  octrg: 1e117,\r\n  notrg: 1e120,\r\n  qag: 1e123,\r\n  uqag: 1e126,\r\n  dqag: 1e129,\r\n  tqag: 1e132,\r\n  qaqag: 1e135,\r\n  qiqag: 1e138,\r\n  sxqag: 1e141,\r\n  spqag: 1e144,\r\n  ocqag: 1e147,\r\n  noqag: 1e150,\r\n  qig: 1e153,\r\n  uqig: 1e156,\r\n  dqig: 1e159,\r\n  tqig: 1e162,\r\n  qaqig: 1e165,\r\n  qiqig: 1e168,\r\n  sxqig: 1e171,\r\n  spqig: 1e174,\r\n  ocqig: 1e177,\r\n  noqig: 1e180,\r\n  sxg: 1e183,\r\n  usxg: 1e186,\r\n  dsxg: 1e189,\r\n  tsxg: 1e192,\r\n  qasxg: 1e195,\r\n  qisxg: 1e198,\r\n  sxsxg: 1e201,\r\n  spsxg: 1e204,\r\n  ocsxg: 1e207,\r\n  nosxg: 1e210,\r\n  spg: 1e213,\r\n  uspg: 1e216,\r\n  dspg: 1e219,\r\n  tspg: 1e222,\r\n  qaspg: 1e225,\r\n  qispg: 1e228,\r\n  sxspg: 1e231,\r\n  spspg: 1e234,\r\n  ocspg: 1e237,\r\n  nospg: 1e240,\r\n  ocg: 1e243,\r\n  uocg: 1e246,\r\n  docg: 1e249,\r\n  tocg: 1e252,\r\n  qaocg: 1e255,\r\n  qiocg: 1e258,\r\n  sxocg: 1e261,\r\n  spocg: 1e264,\r\n  ococg: 1e267,\r\n  noocg: 1e270,\r\n  nog: 1e273,\r\n  unog: 1e276,\r\n  dnog: 1e279,\r\n  tnog: 1e282,\r\n  qanog: 1e285,\r\n  qinog: 1e288,\r\n  sxnog: 1e291,\r\n  spnog: 1e294,\r\n  ocnog: 1e297,\r\n  nonog: 1e300,\r\n  ctg: 1e303,\r\n  uctg: 1e306,\r\n  ctc: 1e309,\r\n};\r\n\r\nexport function parseBet(arg: string | number, totalBalance: number = NaN) {\r\n  let targetArg = `${arg}`.trim();\r\n\r\n  if (targetArg === \"allin\" || (targetArg === \"all\" && !isNaN(totalBalance))) {\r\n    return Number(totalBalance);\r\n  }\r\n\r\n  if (targetArg.endsWith(\"%\")) {\r\n    const per = parseFloat(targetArg.replaceAll(\"%\", \"\")) / 100;\r\n    return Math.floor(Number(totalBalance) * per);\r\n  }\r\n\r\n  const clean = targetArg.replaceAll(\",\", \"\").replaceAll(\"_\", \"\");\r\n\r\n  const multipliers: Record<string, number> = numMultipliers;\r\n\r\n  const suffixPattern = Object.keys(multipliers)\r\n    .sort((a, b) => b.length - a.length)\r\n    .join(\"|\");\r\n\r\n  const regex = new RegExp(\r\n    `^([\\\\d.]+(?:e[+-]?\\\\d+)?)(?:(${suffixPattern}))?$`,\r\n    \"i\"\r\n  );\r\n\r\n  const match = clean.match(regex);\r\n\r\n  if (match) {\r\n    const numberPart = parseFloat(match[1]);\r\n    const abbreviation = match[2];\r\n\r\n    if (!abbreviation) {\r\n      return Math.floor(numberPart);\r\n    }\r\n\r\n    const multiplier = multipliers[String(abbreviation).toLowerCase()];\r\n    if (multiplier !== undefined) {\r\n      return Math.floor(numberPart * multiplier);\r\n    }\r\n  }\r\n\r\n  return NaN;\r\n}\r\n\r\nexport class ArielIcons {\r\n  static mainArrow = \"⇒\";\r\n  static info = \"ℹ️ ⇒\";\r\n}\r\n\r\nexport function abbreviateNumber(\r\n  value: number | string,\r\n  places: number = 3,\r\n  isFull: boolean = false\r\n) {\r\n  let num = Number(value);\r\n  if (isNaN(num)) return \"Invalid input\";\r\n  if (num < 1000) {\r\n    return num.toFixed(places).replace(/\\.?0+$/, \"\");\r\n  }\r\n\r\n  const suffixes = [\r\n    \"\", // 10^0\r\n    \"K\", // 10^3\r\n    \"M\", // 10^6\r\n    \"B\", // 10^9\r\n    \"T\", // 10^12\r\n    \"Qa\", // Quadrillion, 10^15\r\n    \"Qi\", // Quintillion, 10^18\r\n    \"Sx\", // Sextillion, 10^21\r\n    \"Sp\", // Septillion, 10^24\r\n    \"Oc\", // Octillion, 10^27\r\n    \"No\", // Nonillion, 10^30\r\n    \"Dc\", // Decillion, 10^33\r\n    \"Ud\", // Undecillion, 10^36\r\n    \"Dd\", // Duodecillion, 10^39\r\n    \"Td\", // Tredecillion, 10^42\r\n    \"Qad\", // Quattuordecillion, 10^45\r\n    \"Qid\", // Quindecillion, 10^48\r\n    \"Sxd\", // Sexdecillion, 10^51\r\n    \"Spd\", // Septendecillion, 10^54\r\n    \"Ocd\", // Octodecillion, 10^57\r\n    \"Nod\", // Novemdecillion, 10^60\r\n    \"Vg\", // Vigintillion, 10^63\r\n    \"Uvg\", // Unvigintillion, 10^66\r\n    \"Dvg\", // Duovigintillion, 10^69\r\n    \"Tvg\", // Tresvigintillion, 10^72\r\n    \"Qavg\", // Quattuorvigintillion, 10^75\r\n    \"Qivg\", // Quinquavigintillion, 10^78\r\n    \"Sxvg\", // Sexvigintillion, 10^81\r\n    \"Spvg\", // Septenvigintillion, 10^84\r\n    \"Ocvg\", // Octovigintillion, 10^87\r\n    \"Novg\", // Novemvigintillion, 10^90\r\n    \"Trg\", // Trigintillion, 10^93\r\n    \"Utrg\", // Untrigintillion, 10^96\r\n    \"Dtrg\", // Duotrigintillion, 10^99\r\n    \"Ttrg\", // Trestrigintillion, 10^102\r\n    \"Qatrg\", // Quattuortrigintillion, 10^105\r\n    \"Qitrg\", // Quinquatrigintillion, 10^108\r\n    \"Sxtrg\", // Sextrigintillion, 10^111\r\n    \"Sptrg\", // Septentrigintillion, 10^114\r\n    \"Octrg\", // Octotrigintillion, 10^117\r\n    \"Notrg\", // Novemtrigintillion, 10^120\r\n    \"Qag\", // Quadragintillion, 10^123\r\n    \"Uqag\", // Unquadragintillion, 10^126\r\n    \"Dqag\", // Duoquadragintillion, 10^129\r\n    \"Tqag\", // Tresquadragintillion, 10^132\r\n    \"Qaqag\", // Quattuorquadragintillion, 10^135\r\n    \"Qiqag\", // Quinquaquadragintillion, 10^138\r\n    \"Sxqag\", // Sexquadragintillion, 10^141\r\n    \"Spqag\", // Septenquadragintillion, 10^144\r\n    \"Ocqag\", // Octoquadragintillion, 10^147\r\n    \"Noqag\", // Novemquadragintillion, 10^150\r\n    \"Qig\", // Quinquagintillion, 10^153\r\n    \"Uqig\", // Unquinquagintillion, 10^156\r\n    \"Dqig\", // Duoquinquagintillion, 10^159\r\n    \"Tqig\", // Tresquinquagintillion, 10^162\r\n    \"Qaqig\", // Quattuorquinquagintillion, 10^165\r\n    \"Qiqig\", // Quinquaquinquagintillion, 10^168\r\n    \"Sxqig\", // Sexquinquagintillion, 10^171\r\n    \"Spqig\", // Septenquinquagintillion, 10^174\r\n    \"Ocqig\", // Octoquinquagintillion, 10^177\r\n    \"Noqig\", // Novemquinquagintillion, 10^180\r\n    \"Sxg\", // Sexagintillion, 10^183\r\n    \"Usxg\", // Unsexagintillion, 10^186\r\n    \"Dsxg\", // Duosexagintillion, 10^189\r\n    \"Tsxg\", // Tresexagintillion, 10^192\r\n    \"Qasxg\", // Quattuorsexagintillion, 10^195\r\n    \"Qisxg\", // Quinquasexagintillion, 10^198\r\n    \"Sxsxg\", // Sexsexagintillion, 10^201\r\n    \"Spsxg\", // Septensexagintillion, 10^204\r\n    \"Ocsxg\", // Octosexagintillion, 10^207\r\n    \"Nosxg\", // Novemsexagintillion, 10^210\r\n    \"Spg\", // Septuagintillion, 10^213\r\n    \"Uspg\", // Unseptuagintillion, 10^216\r\n    \"Dspg\", // Duoseptuagintillion, 10^219\r\n    \"Tspg\", // Treseptuagintillion, 10^222\r\n    \"Qaspg\", // Quattuorseptuagintillion, 10^225\r\n    \"Qispg\", // Quinquaseptuagintillion, 10^228\r\n    \"Sxspg\", // Sexseptuagintillion, 10^231\r\n    \"Spspg\", // Septenseptuagintillion, 10^234\r\n    \"Ocspg\", // Octoseptuagintillion, 10^237\r\n    \"Nospg\", // Novemseptuagintillion, 10^240\r\n    \"Ocg\", // Octogintillion, 10^243\r\n    \"Uocg\", // Unoctogintillion, 10^246\r\n    \"Docg\", // Duooctogintillion, 10^249\r\n    \"Tocg\", // Tresoctogintillion, 10^252\r\n    \"Qaocg\", // Quattuoroctogintillion, 10^255\r\n    \"Qiocg\", // Quinquaoctogintillion, 10^258\r\n    \"Sxocg\", // Sexoctogintillion, 10^261\r\n    \"Spocg\", // Septenoctogintillion, 10^264\r\n    \"Ococg\", // Octooctogintillion, 10^267\r\n    \"Noocg\", // Novemoctogintillion, 10^270\r\n    \"Nog\", // Nonagintillion, 10^273\r\n    \"Unog\", // Unnonagintillion, 10^276\r\n    \"Dnog\", // Duononagintillion, 10^279\r\n    \"Tnog\", // Tresnonagintillion, 10^282\r\n    \"Qanog\", // Quattuornonagintillion, 10^285\r\n    \"Qinog\", // Quinquanonagintillion, 10^288\r\n    \"Sxnog\", // Sexnonagintillion, 10^291\r\n    \"Spnog\", // Septennonagintillion, 10^294\r\n    \"Ocnog\", // Octononagintillion, 10^297\r\n    \"Nonog\", // Novemnonagintillion, 10^300\r\n    \"Ctg\", // Centillion, 10^303\r\n    \"Uctg\", // Uncentillion, 10^306\r\n    \"Ctc\", // Centicentillion, 10^309\r\n  ];\r\n\r\n  const fullSuffixes = [\r\n    \"\",\r\n    \"Thousand\",\r\n    \"Million\",\r\n    \"Billion\",\r\n    \"Trillion\",\r\n    \"Quadrillion\",\r\n    \"Quintillion\",\r\n    \"Sextillion\",\r\n    \"Septillion\",\r\n    \"Octillion\",\r\n    \"Nonillion\",\r\n    \"Decillion\",\r\n    \"Undecillion\",\r\n    \"Duodecillion\",\r\n    \"Tredecillion\",\r\n    \"Quattuordecillion\",\r\n    \"Quindecillion\",\r\n    \"Sexdecillion\",\r\n    \"Septendecillion\",\r\n    \"Octodecillion\",\r\n    \"Novemdecillion\",\r\n    \"Vigintillion\",\r\n    \"Unvigintillion\", // 10^66\r\n    \"Duovigintillion\", // 10^69\r\n    \"Tresvigintillion\", // 10^72\r\n    \"Quattuorvigintillion\", // 10^75\r\n    \"Quinquavigintillion\", // 10^78\r\n    \"Sexvigintillion\", // 10^81\r\n    \"Septenvigintillion\", // 10^84\r\n    \"Octovigintillion\", // 10^87\r\n    \"Novemvigintillion\", // 10^90\r\n    \"Trigintillion\", // 10^93\r\n    \"Untrigintillion\", // 10^96\r\n    \"Duotrigintillion\", // 10^99\r\n    \"Trestrigintillion\", // 10^102\r\n    \"Quattuortrigintillion\", // 10^105\r\n    \"Quinquatrigintillion\", // 10^108\r\n    \"Sextrigintillion\", // 10^111\r\n    \"Septentrigintillion\", // 10^114\r\n    \"Octotrigintillion\", // 10^117\r\n    \"Novemtrigintillion\", // 10^120\r\n    \"Quadragintillion\", // 10^123\r\n    \"Unquadragintillion\", // 10^126\r\n    \"Duoquadragintillion\", // 10^129\r\n    \"Tresquadragintillion\", // 10^132\r\n    \"Quattuorquadragintillion\", // 10^135\r\n    \"Quinquaquadragintillion\", // 10^138\r\n    \"Sexquadragintillion\", // 10^141\r\n    \"Septenquadragintillion\", // 10^144\r\n    \"Octoquadragintillion\", // 10^147\r\n    \"Novemquadragintillion\", // 10^150\r\n    \"Quinquagintillion\", // 10^153\r\n    \"Unquinquagintillion\", // 10^156\r\n    \"Duoquinquagintillion\", // 10^159\r\n    \"Tresquinquagintillion\", // 10^162\r\n    \"Quattuorquinquagintillion\", // 10^165\r\n    \"Quinquaquinquagintillion\", // 10^168\r\n    \"Sexquinquagintillion\", // 10^171\r\n    \"Septenquinquagintillion\", // 10^174\r\n    \"Octoquinquagintillion\", // 10^177\r\n    \"Novemquinquagintillion\", // 10^180\r\n    \"Sexagintillion\", // 10^183\r\n    \"Unsexagintillion\", // 10^186\r\n    \"Duosexagintillion\", // 10^189\r\n    \"Tresexagintillion\", // 10^192\r\n    \"Quattuorsexagintillion\", // 10^195\r\n    \"Quinquasexagintillion\", // 10^198\r\n    \"Sexsexagintillion\", // 10^201\r\n    \"Septensexagintillion\", // 10^204\r\n    \"Octosexagintillion\", // 10^207\r\n    \"Novemsexagintillion\", // 10^210\r\n    \"Septuagintillion\", // 10^213\r\n    \"Unseptuagintillion\", // 10^216\r\n    \"Duoseptuagintillion\", // 10^219\r\n    \"Treseptuagintillion\", // 10^222\r\n    \"Quattuorseptuagintillion\", // 10^225\r\n    \"Quinquaseptuagintillion\", // 10^228\r\n    \"Sexseptuagintillion\", // 10^231\r\n    \"Septenseptuagintillion\", // 10^234\r\n    \"Octoseptuagintillion\", // 10^237\r\n    \"Novemseptuagintillion\", // 10^240\r\n    \"Octogintillion\", // 10^243\r\n    \"Unoctogintillion\", // 10^246\r\n    \"Duooctogintillion\", // 10^249\r\n    \"Tresoctogintillion\", // 10^252\r\n    \"Quattuoroctogintillion\", // 10^255\r\n    \"Quinquaoctogintillion\", // 10^258\r\n    \"Sexoctogintillion\", // 10^261\r\n    \"Septenoctogintillion\", // 10^264\r\n    \"Octooctogintillion\", // 10^267\r\n    \"Novemoctogintillion\", // 10^270\r\n    \"Nonagintillion\", // 10^273\r\n    \"Unnonagintillion\", // 10^276\r\n    \"Duononagintillion\", // 10^279\r\n    \"Tresnonagintillion\", // 10^282\r\n    \"Quattuornonagintillion\", // 10^285\r\n    \"Quinquanonagintillion\", // 10^288\r\n    \"Sexnonagintillion\", // 10^291\r\n    \"Septennonagintillion\", // 10^294\r\n    \"Octononagintillion\", // 10^297\r\n    \"Novemnonagintillion\", // 10^300\r\n    \"Centillion\", // 10^303\r\n    \"Uncentillion\", // 10^306\r\n    \"Centicentillion\", // 10^309\r\n  ];\r\n\r\n  const magnitude = Math.floor(Math.log10(num) / 3);\r\n\r\n  if (magnitude === 0) {\r\n    return num % 1 === 0\r\n      ? num.toString()\r\n      : num.toFixed(places).replace(/\\.?0+$/, \"\");\r\n  }\r\n\r\n  const abbreviatedValue = num / Math.pow(1000, magnitude);\r\n  const suffix = isFull ? fullSuffixes[magnitude] : suffixes[magnitude];\r\n\r\n  if (!suffix) {\r\n    return num.toExponential();\r\n  }\r\n\r\n  if (abbreviatedValue % 1 === 0) {\r\n    return `${Math.round(abbreviatedValue)}${isFull ? ` ${suffix}` : suffix}`;\r\n  }\r\n\r\n  const formattedValue =\r\n    places === 0\r\n      ? abbreviatedValue.toFixed(0)\r\n      : abbreviatedValue.toFixed(places).replace(/\\.?0+$/, \"\");\r\n\r\n  return `${formattedValue}${isFull ? ` ${suffix}` : suffix}`;\r\n}\r\n\r\nexport function formatCash(\r\n  number: number,\r\n  emoji?: string,\r\n  bold?: boolean\r\n): string;\r\n\r\nexport function formatCash(number: number, bold?: boolean): string;\r\n\r\nexport function formatCash(\r\n  number: number = 0,\r\n  emoji: string | boolean = \"💵\",\r\n  bold = false\r\n) {\r\n  if (typeof emoji === \"boolean\") {\r\n    bold = emoji;\r\n    emoji = \"💵\";\r\n  }\r\n  return `${bold ? \"**\" : \"\"}${\r\n    number > 999 ? `($${abbreviateNumber(number)}) ` : \"\"\r\n  }$${Number(number).toLocaleString()}${emoji || \"💵\"}${bold ? \"**\" : \"\"}`;\r\n}\r\n\r\nexport function formatValue(\r\n  number: number,\r\n  emoji?: string,\r\n  bold?: boolean\r\n): string;\r\n\r\nexport function formatValue(number: number, bold?: boolean): string;\r\n\r\nexport function formatValue(\r\n  number: number = 0,\r\n  emoji: string | boolean = \"🎲\",\r\n  bold = false\r\n) {\r\n  if (typeof emoji === \"boolean\") {\r\n    bold = emoji;\r\n    emoji = \"🎲\";\r\n  }\r\n  return `${bold ? \"**\" : \"\"}${\r\n    number > 999 ? `(${emoji || \"🎲\"}${abbreviateNumber(number)}) ` : \"\"\r\n  }${emoji || \"🎲\"}${Number(number).toLocaleString()}${bold ? \"**\" : \"\"}`;\r\n}\r\n\r\nexport function formatTimeSentence(ms: number, showMs = false): string {\r\n  const baseUnits = [\r\n    { label: \"year\", ms: 365 * 24 * 60 * 60 * 1000 },\r\n    { label: \"day\", ms: 24 * 60 * 60 * 1000 },\r\n    { label: \"hour\", ms: 60 * 60 * 1000 },\r\n    { label: \"minute\", ms: 60 * 1000 },\r\n    { label: \"second\", ms: 1000 },\r\n  ];\r\n\r\n  const allUnits = showMs\r\n    ? [...baseUnits, { label: \"millisecond\", ms: 1 }]\r\n    : baseUnits;\r\n\r\n  const parts: string[] = [];\r\n\r\n  let remainingMs = ms;\r\n\r\n  for (const { label, ms: unitMs } of allUnits) {\r\n    const value = Math.floor(remainingMs / unitMs);\r\n    if (value > 0) {\r\n      parts.push(`${value} ${label}${value > 1 ? \"s\" : \"\"}`);\r\n      remainingMs %= unitMs;\r\n    }\r\n  }\r\n\r\n  if (parts.length === 0 && !showMs && ms > 0 && ms < 1000) {\r\n    parts.push(`${ms} millisecond${ms !== 1 ? \"s\" : \"\"}`);\r\n  }\r\n\r\n  if (parts.length === 0) return \"\";\r\n\r\n  if (parts.length === 1) return parts[0];\r\n  if (parts.length === 2) return `${parts[0]} and ${parts[1]}`;\r\n  return `${parts.slice(0, -1).join(\", \")}, and ${parts[parts.length - 1]}`;\r\n}\r\n\r\nexport function getMinimumChange(total: number) {\r\n  const exp = Math.floor(Math.log2(Math.abs(total)));\r\n  return Math.pow(2, exp - 52);\r\n}\r\n\r\nexport function isNoChange(change: number, total: number) {\r\n  return change < getMinimumChange(total);\r\n}\r\n","import fs from \"fs/promises\";\r\n\r\n/**\r\n * Datum Namespace Utilities\r\n * -------------------------\r\n * Collection of functions and types for manipulating and querying structured data.\r\n * Includes JSON helpers, filtering, schema validation, and data encoding/decoding utilities.\r\n *\r\n * Author: Nealiana Kaye Cagara (@lianecagara)\r\n */\r\n\r\nexport namespace Datum {\r\n  /**\r\n   * Type-safe structure for `package.json`.\r\n   * Augments the base shape with optional fields and extensibility.\r\n   */\r\n  export type PackageJson = {\r\n    /** Optional name of the package */\r\n    name?: string;\r\n    /** Optional version of the package */\r\n    version?: string;\r\n    /** Runtime dependencies */\r\n    dependencies?: Record<string, string>;\r\n    /** Development dependencies */\r\n    devDependencies?: Record<string, string>;\r\n    /** Allows additional custom fields */\r\n    [key: string]: any;\r\n  };\r\n\r\n  /**\r\n   * Defines a flexible query interface for filtering values of type `T`.\r\n   * Mirrors MongoDB-style operators.\r\n   */\r\n  export type QueryOperator<T> =\r\n    | { $eq?: T } // Equal to\r\n    | { $ne?: T } // Not equal to\r\n    | { $gt?: T } // Greater than\r\n    | { $gte?: T } // Greater than or equal\r\n    | { $lt?: T } // Less than\r\n    | { $lte?: T } // Less than or equal\r\n    | { $in?: T[] } // Included in array\r\n    | { $nin?: T[] } // Not included in array\r\n    | { $regex?: RegExp }; // Matches RegExp\r\n\r\n  /**\r\n   * Filters object type `T` based on per-key conditions.\r\n   * Each key may be matched directly or via an operator.\r\n   */\r\n  export type Query<T> = Partial<\r\n    Record<keyof T, QueryOperator<T[keyof T]> | T[keyof T]>\r\n  >;\r\n\r\n  /**\r\n   * Schema type for object validation.\r\n   * Can be:\r\n   * - a primitive type string (e.g., 'string', 'number')\r\n   * - a class constructor (e.g., Date)\r\n   * - a recursive object structure\r\n   */\r\n  export type Schema = string | Function | { [key: string]: Schema };\r\n\r\n  /**\r\n   * Reads and parses a package.json file asynchronously.\r\n   * @param pkgPath - Path to the package.json file (default: \"./package.json\")\r\n   * @returns Promise resolving to the parsed PackageJson object, or null if read/parse fails\r\n   */\r\n  export async function readPackageJson(\r\n    pkgPath = \"./package.json\"\r\n  ): Promise<PackageJson | null> {\r\n    try {\r\n      const data = await fs.readFile(pkgPath, \"utf-8\");\r\n      return JSON.parse(data);\r\n    } catch {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves the `name` field from a package.json file asynchronously.\r\n   * @param pkgPath - Path to the package.json file (default: \"./package.json\")\r\n   * @returns Promise resolving to the package name string or null if not found/error\r\n   */\r\n  export async function getPackageName(\r\n    pkgPath = \"./package.json\"\r\n  ): Promise<string | null> {\r\n    const pkg = await readPackageJson(pkgPath);\r\n    return pkg?.name ?? null;\r\n  }\r\n\r\n  /**\r\n   * Retrieves the `version` field from a package.json file asynchronously.\r\n   * @param pkgPath - Path to the package.json file (default: \"./package.json\")\r\n   * @returns Promise resolving to the package version string or null if not found/error\r\n   */\r\n  export async function getPackageVersion(\r\n    pkgPath = \"./package.json\"\r\n  ): Promise<string | null> {\r\n    const pkg = await readPackageJson(pkgPath);\r\n    return pkg?.version ?? null;\r\n  }\r\n\r\n  /**\r\n   * Updates the package.json file at the specified path by applying an updater function.\r\n   * Reads the existing package.json, applies the updater, and writes back the result.\r\n   * @param pkgPath - Path to the package.json file\r\n   * @param updater - Function receiving the current PackageJson and returning the updated PackageJson\r\n   * @returns Promise resolving when the update and write operation completes\r\n   */\r\n  export async function updatePackageJson(\r\n    pkgPath: string,\r\n    updater: (pkg: PackageJson) => PackageJson\r\n  ): Promise<void> {\r\n    const pkg = (await readPackageJson(pkgPath)) || ({} as PackageJson);\r\n    const updated = updater(pkg);\r\n    await fs.writeFile(pkgPath, JSON.stringify(updated, null, 2));\r\n  }\r\n\r\n  /**\r\n   * Parses a JSON string into an object of type T.\r\n   * Returns null if parsing fails.\r\n   * @param jsonStr - JSON string to parse\r\n   * @returns Parsed object of type T or null if invalid JSON\r\n   */\r\n  export function parseJson<T>(jsonStr: string): T | null {\r\n    try {\r\n      return JSON.parse(jsonStr);\r\n    } catch {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stringifies an object into a JSON string.\r\n   * Optionally pretty-prints with 2-space indentation.\r\n   * @param obj - Object to stringify\r\n   * @param pretty - If true, format JSON with indentation (default: false)\r\n   * @returns JSON string representation of the object\r\n   */\r\n  export function stringifyJson(obj: unknown, pretty = false): string {\r\n    return pretty ? JSON.stringify(obj, null, 2) : JSON.stringify(obj);\r\n  }\r\n\r\n  /**\r\n   * Validates if an object matches a given schema.\r\n   * Supports primitive type strings, constructor functions, and nested schemas.\r\n   * @param obj - Object to validate\r\n   * @param schema - Schema definition to validate against\r\n   * @returns True if object matches schema, false otherwise\r\n   */\r\n  export function validateSchema(obj: unknown, schema: Schema): boolean {\r\n    if (typeof schema === \"string\") {\r\n      return typeof obj === schema;\r\n    }\r\n\r\n    if (typeof schema === \"function\") {\r\n      return obj instanceof schema;\r\n    }\r\n\r\n    if (\r\n      typeof schema === \"object\" &&\r\n      schema !== null &&\r\n      typeof obj === \"object\" &&\r\n      obj !== null\r\n    ) {\r\n      for (const key in schema) {\r\n        if (!validateSchema((obj as any)[key], schema[key])) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Internal helper to check if a value matches a query condition or operator.\r\n   * Supports equality, inequality, comparison, inclusion, and regex operators.\r\n   * @param value - The value to test\r\n   * @param condition - Query condition or direct value\r\n   * @returns True if value matches condition, false otherwise\r\n   */\r\n  function matchesField<T>(value: T, condition: QueryOperator<T> | T): boolean {\r\n    if (condition instanceof RegExp) {\r\n      return typeof value === \"string\" && condition.test(value);\r\n    }\r\n\r\n    if (typeof condition !== \"object\" || condition === null) {\r\n      return value === condition;\r\n    }\r\n\r\n    if (\r\n      typeof value === \"object\" &&\r\n      value !== null &&\r\n      !Array.isArray(value) &&\r\n      !(\r\n        \"$eq\" in condition ||\r\n        \"$ne\" in condition ||\r\n        \"$gt\" in condition ||\r\n        \"$gte\" in condition ||\r\n        \"$lt\" in condition ||\r\n        \"$lte\" in condition ||\r\n        \"$in\" in condition ||\r\n        \"$nin\" in condition ||\r\n        \"$regex\" in condition\r\n      )\r\n    ) {\r\n      for (const key in condition) {\r\n        if (!matchesField((value as any)[key], (condition as any)[key])) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n\r\n    for (const op in condition) {\r\n      const condVal = (condition as any)[op];\r\n      switch (op) {\r\n        case \"$eq\":\r\n          if (value !== condVal) return false;\r\n          break;\r\n        case \"$ne\":\r\n          if (value === condVal) return false;\r\n          break;\r\n        case \"$gt\":\r\n          if (!(value > condVal)) return false;\r\n          break;\r\n        case \"$gte\":\r\n          if (!(value >= condVal)) return false;\r\n          break;\r\n        case \"$lt\":\r\n          if (!(value < condVal)) return false;\r\n          break;\r\n        case \"$lte\":\r\n          if (!(value <= condVal)) return false;\r\n          break;\r\n        case \"$in\":\r\n          if (!Array.isArray(condVal) || !condVal.includes(value)) return false;\r\n          break;\r\n        case \"$nin\":\r\n          if (Array.isArray(condVal) && condVal.includes(value)) return false;\r\n          break;\r\n        case \"$regex\":\r\n          if (typeof value !== \"string\" || !condVal.test(value)) return false;\r\n          break;\r\n        default:\r\n          return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Filters data entries based on a query object.\r\n   * Supports data as a Record or Map.\r\n   * @param data - Data collection to query (Record or Map)\r\n   * @param query - Query object specifying filter conditions\r\n   * @returns Array of matching data items\r\n   */\r\n  export function queryData<T>(\r\n    data: Record<string, T> | Map<string, T>,\r\n    query: Query<T>\r\n  ): T[] {\r\n    const items =\r\n      data instanceof Map ? Array.from(data.values()) : Object.values(data);\r\n    return items.filter((item) => {\r\n      for (const key in query) {\r\n        const condition = query[key];\r\n        const val = (item as any)[key];\r\n        if (!matchesField(val, condition as any)) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the key or keys in the object that match the given value.\r\n   * @param value - The value to search for.\r\n   * @param parentObj - The object to search within.\r\n   * @returns The first matching key as a string, or an array of matching keys, or null if none found.\r\n   */\r\n  export function keyOf<T extends object>(\r\n    value: unknown,\r\n    parentObj: T\r\n  ): string | string[] | null {\r\n    const keys = Object.entries(parentObj)\r\n      .filter(([_, v]) => v === value)\r\n      .map(([k]) => k);\r\n\r\n    if (keys.length === 0) return null;\r\n    return keys.length === 1 ? keys[0] : keys;\r\n  }\r\n\r\n  /**\r\n   * Returns the value or values from the object for the given key(s).\r\n   * @param key - A single key or an array of keys.\r\n   * @param parentObj - The object to retrieve values from.\r\n   * @returns The value for a single key, an array of values for multiple keys, or null if not found.\r\n   */\r\n  export function valueOf<T extends object>(\r\n    key: keyof T | (keyof T)[],\r\n    parentObj: T\r\n  ): T[keyof T] | T[keyof T][] | null {\r\n    if (Array.isArray(key)) {\r\n      const values = key\r\n        .map((k) => parentObj[k])\r\n        .filter((v) => v !== undefined);\r\n\r\n      if (values.length === 0) return null;\r\n      return values;\r\n    }\r\n\r\n    const val = parentObj[key];\r\n    return val !== undefined ? val : null;\r\n  }\r\n\r\n  /**\r\n   * Returns a new array containing only unique elements from the input array.\r\n   *\r\n   * - If no callback is provided, uniqueness is determined using strict equality (`===`).\r\n   * - If a callback is provided, it is used to derive a value from each item for uniqueness comparison.\r\n   *\r\n   * @template T - Type of items in the input array\r\n   * @template K - Type of key returned by the callback function (if provided)\r\n   *\r\n   * @param array - The input array to filter.\r\n   * @param callback - Optional function to generate a comparison key for each item.\r\n   *\r\n   * @returns A new array containing only unique items.\r\n   *\r\n   * @example\r\n   * toUniqueArray([1, 2, 2, 3]); // [1, 2, 3]\r\n   *\r\n   * @example\r\n   * toUniqueArray(['one', 'two', 'three'], str => str.length); // ['one', 'three']\r\n   *\r\n   * @example\r\n   * toUniqueArray([{ id: 1 }, { id: 2 }, { id: 1 }], obj => obj.id); // [{ id: 1 }, { id: 2 }]\r\n   */\r\n  export function toUniqueArray<T, K = T>(\r\n    array: T[],\r\n    callback?: (item: T) => K\r\n  ): T[] {\r\n    const seen = new Set<K | T>();\r\n    const result: T[] = [];\r\n\r\n    for (const item of array) {\r\n      const key = callback ? callback(item) : item;\r\n      if (!seen.has(key)) {\r\n        seen.add(key);\r\n        result.push(item);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /** Permissible object keys in TypeScript */\r\n  export type ObjectKey = string | number | symbol;\r\n\r\n  /**\r\n   * Decodes a game ID string from a custom web-safe base64 format.\r\n   *\r\n   * - Removes the GAME_ID_PREFIX if present.\r\n   * - Adds padding to make the base64 valid.\r\n   * - Decodes from base64 and removes the `custom_` prefix (if any).\r\n   *\r\n   * @param input - Encoded game ID string (e.g., from URL or database).\r\n   * @returns Decoded UTF-8 string, or original input if decoding fails.\r\n   */\r\n  export function decodeGameID(input: string) {\r\n    input = `${input}`;\r\n\r\n    input = input.replace(GAME_ID_PREFIX, \"\");\r\n    const pad = input.length % 4;\r\n    if (pad > 0) {\r\n      input += \"=\".repeat(4 - pad);\r\n    }\r\n    try {\r\n      return Buffer.from(input, \"base64\")\r\n        .toString(\"utf8\")\r\n        .replaceAll(\"custom_\", \"\");\r\n    } catch (e) {\r\n      return input;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Prefix used to mark encoded game IDs in web-safe format.\r\n   * Used by `encodeGameID` and `decodeGameID`.\r\n   */\r\n  export const GAME_ID_PREFIX = \"web:\";\r\n\r\n  /**\r\n   * Encodes a UTF-8 string into a custom base64 game ID format.\r\n   *\r\n   * - Encodes the input string using standard base64.\r\n   * - Adds the GAME_ID_PREFIX.\r\n   *\r\n   * @param input - Raw string to encode as a game ID.\r\n   * @returns Encoded game ID string or the original input if encoding fails.\r\n   */\r\n  export function encodeGameID(input: string) {\r\n    input = `${input}`;\r\n    try {\r\n      if (input.startsWith(GAME_ID_PREFIX)) {\r\n        return input;\r\n      }\r\n      const encodedIP = Buffer.from(input.replaceAll(\"custom_\", \"\"))\r\n        .toString(\"base64\")\r\n        .replace(/=/g, \"\");\r\n      return `${GAME_ID_PREFIX}${encodedIP}`;\r\n    } catch (error) {\r\n      return input;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Encodes a UTF-8 string into a custom base64 game ID format.\r\n   *\r\n   * - Encodes the input string using standard base64.\r\n   * - Replaces `+`, `/`, and `=` characters to make it URL-safe.\r\n   * - Adds the GAME_ID_PREFIX.\r\n   *\r\n   * @param input - Raw string to encode as a game ID.\r\n   * @returns Encoded game ID string or the original input if encoding fails.\r\n   */\r\n  export function encodeGameIDLegacy(input: string) {\r\n    try {\r\n      const encodedIP = Buffer.from(input)\r\n        .toString(\"base64\")\r\n        .replace(/[+/=]/g, (match) => ({ \"+\": \"0\", \"/\": \"1\", \"=\": \"\" }[match] ?? \"\"));\r\n      return `${GAME_ID_PREFIX}${encodedIP}`;\r\n    } catch (error) {\r\n      return input;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a proxy-based object that behaves like a plain object,\r\n   * but is backed by an internal `Map`. Allows for:\r\n   *\r\n   * - Map-style access and mutation.\r\n   * - Proxy-based integration with object semantics (`in`, `for...in`, etc.).\r\n   *\r\n   * @template T - Type of the original object.\r\n   * @param plainObj - An optional base object to initialize the map from.\r\n   * @returns An object containing:\r\n   *   - `map`: the internal `Map` storing key-value pairs.\r\n   *   - `proxied`: a proxy object with object-like behavior powered by the `Map`.\r\n   *\r\n   * @example\r\n   * const { map, proxied } = makeMapPlain({ a: 1 });\r\n   * proxied.b = 2;\r\n   * console.log(map.get(\"b\")); // 2\r\n   */\r\n  export function makeMapPlain<T extends Record<ObjectKey, any>>(\r\n    plainObj: T = {} as T\r\n  ) {\r\n    const internalMap = new Map<keyof T, T[keyof T]>(\r\n      Object.entries(plainObj) as [keyof T, T[keyof T]][]\r\n    );\r\n\r\n    const target: T = Object.create(Object.getPrototypeOf(plainObj));\r\n\r\n    const handler: ProxyHandler<T> = {\r\n      get(target, prop, receiver) {\r\n        if (prop === Symbol.iterator) {\r\n          return function* () {\r\n            for (const [key, value] of internalMap) {\r\n              yield [key, value];\r\n            }\r\n          };\r\n        }\r\n        if (typeof prop === \"symbol\" || prop in Object.prototype) {\r\n          return Reflect.get(target, prop, receiver);\r\n        }\r\n        return internalMap.get(prop as keyof T);\r\n      },\r\n      set(_target, prop, value, _receiver) {\r\n        internalMap.set(prop as keyof T, value);\r\n        return true;\r\n      },\r\n      deleteProperty(_target, prop) {\r\n        return internalMap.delete(prop as keyof T);\r\n      },\r\n      has(_target, prop) {\r\n        return internalMap.has(prop as keyof T);\r\n      },\r\n      ownKeys(_target) {\r\n        return Array.from(internalMap.keys()) as Array<string | symbol>;\r\n      },\r\n      getOwnPropertyDescriptor(_target, prop) {\r\n        if (internalMap.has(prop as keyof T)) {\r\n          return {\r\n            value: internalMap.get(prop as keyof T),\r\n            writable: true,\r\n            enumerable: true,\r\n            configurable: true,\r\n          };\r\n        }\r\n        return undefined;\r\n      },\r\n      defineProperty(_target, prop, descriptor) {\r\n        if (\"value\" in descriptor && descriptor.value !== undefined) {\r\n          internalMap.set(prop as keyof T, descriptor.value);\r\n        } else if (!descriptor.get && !descriptor.set) {\r\n          internalMap.delete(prop as keyof T);\r\n        }\r\n        return true;\r\n      },\r\n      getPrototypeOf(target) {\r\n        return Object.getPrototypeOf(target);\r\n      },\r\n      setPrototypeOf(target, proto) {\r\n        Object.setPrototypeOf(target, proto);\r\n        return true;\r\n      },\r\n      isExtensible(_target) {\r\n        return true;\r\n      },\r\n      preventExtensions(_target) {\r\n        return false;\r\n      },\r\n    };\r\n\r\n    const proxied = new Proxy(target, handler);\r\n    return { map: internalMap, proxied };\r\n  }\r\n\r\n  /**\r\n   * Returns a shuffled version of the input array or object.\r\n   *\r\n   * - Arrays are shuffled using the Fisher-Yates algorithm.\r\n   * - Objects are converted to key-value entries, shuffled, then reconstructed.\r\n   *\r\n   * @template T - Type of array elements or object values.\r\n   * @param inp - Input array or object to shuffle.\r\n   * @returns Shuffled array or object of the same type.\r\n   *\r\n   * @example\r\n   * shuffle([1, 2, 3]); // e.g., [3, 1, 2]\r\n   * shuffle({ a: 1, b: 2 }); // e.g., { b: 2, a: 1 }\r\n   */\r\n  export function shuffle<T>(array: T[]): T[];\r\n\r\n  export function shuffle<O extends Record<ObjectKey, any>>(object: O): O;\r\n\r\n  export function shuffle(inp: any[] | Record<ObjectKey, any>) {\r\n    if (!Array.isArray(inp)) {\r\n      return Object.fromEntries(shuffle(Object.entries(inp)));\r\n    } else {\r\n      return fisherYates(inp);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a random integer between the given min and max values (inclusive).\r\n   *\r\n   * - Both `min` and `max` are inclusive.\r\n   * - If `min` is greater than `max`, the values are swapped internally.\r\n   *\r\n   * @param min - The lower bound (inclusive).\r\n   * @param max - The upper bound (inclusive).\r\n   * @returns A random integer within the specified range.\r\n   *\r\n   * @example\r\n   * randomInt(1, 5); // e.g., 3\r\n   * randomInt(5, 5); // 5\r\n   * randomInt(10, 1); // e.g., 7 (handles swapped bounds)\r\n   */\r\n  export function randomInt(min: number, max: number): number {\r\n    if (min > max) [min, max] = [max, min];\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n\r\n  /**\r\n   * Shuffles an array in-place using the Fisher-Yates algorithm.\r\n   *\r\n   * - Produces a uniformly random permutation.\r\n   * - Returns a new array (does not mutate the original).\r\n   *\r\n   * @template T - Type of elements in the array.\r\n   * @param array - Input array to shuffle.\r\n   * @returns A new array with shuffled elements.\r\n   *\r\n   * @example\r\n   * fisherYates([1, 2, 3]); // e.g., [2, 3, 1]\r\n   */\r\n  export function fisherYates<T>(array: T[]): T[] {\r\n    const a = [...array];\r\n    for (let i = a.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [a[i], a[j]] = [a[j], a[i]];\r\n    }\r\n    return a;\r\n  }\r\n\r\n  /**\r\n   * Recursively sorts the keys of an object to produce a normalized structure.\r\n   * Useful for consistent hashing, equality checks, or serialization where key order matters.\r\n   *\r\n   * @template T\r\n   * @param input - The input to normalize, which may be an object, array, or primitive.\r\n   * @returns A new object/array with keys sorted recursively, or the original primitive value.\r\n   *\r\n   * @example\r\n   * const obj = { b: 1, a: { d: 4, c: 3 } };\r\n   * const normalized = normalize(obj);\r\n   * // normalized = { a: { c: 3, d: 4 }, b: 1 }\r\n   */\r\n  export function normalize<T>(input: T): T {\r\n    if (Array.isArray(input)) {\r\n      return input.map(normalize) as T;\r\n    } else if (input !== null && typeof input === \"object\") {\r\n      const sorted = Object.keys(input)\r\n        .sort()\r\n        .reduce((acc, key) => {\r\n          acc[key] = normalize((input as any)[key]);\r\n          return acc;\r\n        }, {} as any);\r\n      return sorted as T;\r\n    }\r\n    return input;\r\n  }\r\n\r\n  /**\r\n   * Validates that an object conforms to a partial schema of validation functions.\r\n   * Each schema key maps to a function that returns true if the value is valid, false otherwise.\r\n   * Does not throw; instead returns a tuple of validity and error messages.\r\n   *\r\n   * @template T extends object\r\n   * @param obj - The object to validate.\r\n   * @param schema - Partial validation schema.\r\n   * @returns A tuple where the first element indicates overall validity,\r\n   *   and the second is an array of error messages for failed validations.\r\n   *\r\n   * @example\r\n   * const schema = {\r\n   *   age: (val) => typeof val === \"number\" && val > 0,\r\n   *   name: (val) => typeof val === \"string\" && val.length > 0,\r\n   * };\r\n   * const [isValid, errors] = conform({ age: 25, name: \"Alice\" }, schema);\r\n   */\r\n  export function conform<T extends object>(\r\n    obj: any,\r\n    schema: Partial<Record<keyof T, (val: any) => boolean>>\r\n  ): [boolean, string[]] {\r\n    const errors: string[] = [];\r\n    for (const key in schema) {\r\n      if (!schema[key]!(obj[key])) {\r\n        errors.push(`Key '${key}' failed validation.`);\r\n      }\r\n    }\r\n    return [errors.length === 0, errors];\r\n  }\r\n\r\n  /**\r\n   * Creates a new object by picking only the specified keys from the input object.\r\n   *\r\n   * @template T extends object, K extends keyof T\r\n   * @param obj - Source object to pick properties from.\r\n   * @param keys - Array of keys to select.\r\n   * @returns New object containing only the picked keys.\r\n   *\r\n   * @example\r\n   * const obj = { a: 1, b: 2, c: 3 };\r\n   * const picked = pick(obj, ['a', 'c']);\r\n   * // picked = { a: 1, c: 3 }\r\n   */\r\n  export function pick<T extends object, K extends keyof T>(\r\n    obj: T,\r\n    keys: K[]\r\n  ): Pick<T, K> {\r\n    const result = {} as Pick<T, K>;\r\n    for (const key of keys) {\r\n      if (key in obj) result[key] = obj[key];\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Infers the simple type or shape of a given value as a string.\r\n   * Recognizes \"array\", \"null\", or the result of `typeof`.\r\n   *\r\n   * @param value - The value to infer the type of.\r\n   * @returns The inferred type string: \"array\", \"null\", or `typeof` result.\r\n   *\r\n   * @example\r\n   * infer([1,2]); // \"array\"\r\n   * infer(null);  // \"null\"\r\n   * infer(123);   // \"number\"\r\n   */\r\n  export function infer(value: any[]): \"array\";\r\n  export function infer(value: null): \"null\";\r\n  export function infer(value: string): \"string\";\r\n  export function infer(value: number): \"number\";\r\n  export function infer(value: boolean): \"boolean\";\r\n  export function infer(value: undefined): \"undefined\";\r\n  export function infer(value: Function): \"function\";\r\n  export function infer(value: object): \"object\";\r\n  export function infer(value: any): string;\r\n\r\n  export function infer(value: any): string {\r\n    if (Array.isArray(value)) return \"array\";\r\n    if (value === null) return \"null\";\r\n    return typeof value;\r\n  }\r\n\r\n  /**\r\n   * Recursively searches an object to find the path (array of keys) to a given target value.\r\n   * Returns null if the target is not found.\r\n   *\r\n   * @param obj - The object to search within.\r\n   * @param target - The target value to find.\r\n   * @param path - Accumulated path during recursion (for internal use).\r\n   * @returns Array of keys representing the path to the target, or null if not found.\r\n   *\r\n   * @example\r\n   * const obj = { a: { b: { c: 42 } } };\r\n   * trace(obj, 42); // [\"a\", \"b\", \"c\"]\r\n   */\r\n  export function trace(\r\n    obj: any,\r\n    target: any,\r\n    path: string[] = []\r\n  ): string[] | null {\r\n    if (obj === target) return path;\r\n    if (typeof obj !== \"object\" || obj === null) return null;\r\n\r\n    for (const key in obj) {\r\n      const result = trace(obj[key], target, [...path, key]);\r\n      if (result) return result;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Converts an array of objects into a lookup map keyed by a specified object property.\r\n   *\r\n   * @template T, K extends keyof T\r\n   * @param array - Array of objects to index.\r\n   * @param key - Key property name to use as the map key.\r\n   * @returns Object mapping from stringified key values to corresponding objects.\r\n   *\r\n   * @example\r\n   * const users = [{ id: 1, name: \"Alice\" }, { id: 2, name: \"Bob\" }];\r\n   * const userMap = index(users, \"id\");\r\n   * // userMap = { \"1\": { id: 1, name: \"Alice\" }, \"2\": { id: 2, name: \"Bob\" } }\r\n   */\r\n  export function index<T, K extends keyof T>(\r\n    array: T[],\r\n    key: K\r\n  ): Record<string, T> {\r\n    return array.reduce((acc, item) => {\r\n      const id = String(item[key]);\r\n      acc[id] = item;\r\n      return acc;\r\n    }, {} as Record<string, T>);\r\n  }\r\n\r\n  /**\r\n   * Remaps keys of an object according to a mapping function or key map object.\r\n   * If no mapping exists for a key, it retains the original key.\r\n   *\r\n   * @template T extends object\r\n   * @param obj - The source object whose keys will be remapped.\r\n   * @param mapper\r\n   *   Either an object mapping old keys to new keys, or a function that returns the new key for each entry.\r\n   * @returns New object with remapped keys and original values.\r\n   *\r\n   * @example\r\n   * remap({ a: 1, b: 2 }, { a: \"alpha\" }); // { alpha: 1, b: 2 }\r\n   * remap({ a: 1, b: 2 }, (k, v) => k.toUpperCase()); // { A: 1, B: 2 }\r\n   */\r\n  export function remap<T extends object>(\r\n    obj: T,\r\n    mapper:\r\n      | { [K in keyof T]?: string }\r\n      | ((key: keyof T, value: T[keyof T]) => string)\r\n  ): Record<string, any> {\r\n    const result: Record<string, any> = {};\r\n    for (const key in obj) {\r\n      const newKey =\r\n        typeof mapper === \"function\"\r\n          ? mapper(key, obj[key])\r\n          : mapper[key] ?? key;\r\n      result[newKey] = obj[key];\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Asserts that a condition is truthy. Throws an error with a message if the condition is falsy.\r\n   * Useful for runtime type checks and ensuring invariants.\r\n   *\r\n   * @param condition - Condition to assert truthy.\r\n   * @param message- Error message for the thrown exception.\r\n   * @throws {Error} Throws if the condition is falsy.\r\n   *\r\n   * @example\r\n   * assert(typeof value === \"string\", \"Value must be a string\");\r\n   */\r\n  export function assert(\r\n    condition: any,\r\n    message = \"Assertion failed\"\r\n  ): asserts condition {\r\n    if (!condition) {\r\n      throw new Error(message);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a random element from an array, or null if the array is empty.\r\n   *\r\n   * @template T\r\n   * @param array - The array to sample from.\r\n   * @returns A randomly chosen element, or null if the array has no elements.\r\n   *\r\n   * @example\r\n   * sample([1, 2, 3]); // might return 2\r\n   * sample([]);        // returns null\r\n   */\r\n  export function sample<T>(array: T[]): T | null {\r\n    if (array.length === 0) return null;\r\n    const index = Math.floor(Math.random() * array.length);\r\n    return array[index];\r\n  }\r\n}\r\n"],"mappings":"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","names":["_a","Datum","fs","target","index","text"]}